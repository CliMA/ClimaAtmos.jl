#=
       .-.      Welcome to ClimaAtmos!
      (   ).    ----------------------
     (___(__)   A state-of-the-art Julia model for
    ‚åú^^^^^^^‚åù   simulating atmospheric dynamics.
   ‚åú  ~  ~  ‚åù
  ‚åú ~  ~  ~  ‚åù  This example: *Dry Baroclinic Wave*
 ‚åú  ~   ~  ~ ‚åù
‚åú~~~~~~~~~~~~~‚åù  ‚ö° Harnessing GPU acceleration with CUDA.jl
    ‚Äú‚Äú‚Äú‚Äú‚Äú‚Äú‚Äú      üåé Pushing the frontiers of climate science!

Run with
```
julia +1.11 --project=.buildkite
ENV["CLIMACOMMS_DEVICE"] = "CUDA";
ENV["CLIMACOMMS_DEVICE"] = "CPU";
using Revise; include("examples/dry_baro_wave_kernel.jl")
=#
# ENV["CLIMACOMMS_DEVICE"] = "CPU";
ENV["CLIMACOMMS_DEVICE"] = "CUDA";
high_res = true;
using CUDA
import ClimaComms
ClimaComms.@import_required_backends
using ClimaCore.CommonSpaces
import ClimaAtmos as CA
import ClimaCore.Fields.StaticArrays: MArray
using LazyBroadcast: lazy
using LinearAlgebra: √ó, dot, norm
import ClimaAtmos.Parameters as CAP
import Thermodynamics as TD
import SciMLBase
import ClimaCore.Grids
import ClimaCore
using KernelAbstractions
import KernelAbstractions as KA
import ClimaTimeSteppers as CTS
import ClimaCore.Geometry
import ClimaCore.MatrixFields: @name, ‚ãÖ
import ClimaCore.MatrixFields: DiagonalMatrixRow, BidiagonalMatrixRow
import LinearAlgebra: Adjoint
import LinearAlgebra: adjoint
import LinearAlgebra as LA
import ClimaCore: Operators, Topologies, DataLayouts
import ClimaCore.MatrixFields
import ClimaCore.Spaces
import ClimaCore.Fields
# import KernelAbstractions as KA
# using KernelAbstractions

# Unless the kernel here fills the shmem, we cannot use the shmem getidx.
# So, let's disable for now. Maybe we can write a simple shmem transformation
# of the broadcasted object + the state.
const cccuda_ext = Base.get_extension(ClimaCore, :ClimaCoreCUDAExt);
# LazyBroadcast calls instantiate on intermediate broadcast expressions, so we
# should be determining AbstractStencilStyle locally.
# ClimaCore bug: stencil style should be locally determined at the top level, not using the recursive Operators.any_fd_shmem_supported(bc)
Operators.AbstractStencilStyle(bc, ::ClimaComms.CUDADevice) =
    cccuda_ext.CUDAColumnStencilStyle
Operators.fd_shmem_is_supported(bc::Base.Broadcast.Broadcasted) = false
ClimaCore.Operators.use_fd_shmem() = false

@info "Arch: $(ClimaComms.device())"
if get(ENV, "CLIMACOMMS_DEVICE", "CPU") == "CUDA"
    using CUDA
    using CUDA.CUDAKernels
    CUDA.allowscalar(false)
else
end

# allow on-device use of lazy broadcast objects
DataLayouts.parent_array_type(::Type{<:CUDA.CuDeviceArray{T, N, A} where {N}}) where {T, A} =
    CUDA.CuDeviceArray{T, N, A} where {N}

# allow on-device use of lazy broadcast objects
DataLayouts.promote_parent_array_type(
    ::Type{CUDA.CuDeviceArray{T1, N, B} where {N}},
    ::Type{CUDA.CuDeviceArray{T2, N, B} where {N}},
) where {T1, T2, B} = CUDA.CuDeviceArray{promote_type(T1, T2), N, B} where {N}

# Ditch sizes (they're never actually used!)
DataLayouts.promote_parent_array_type(
    ::Type{MArray{S1, T1}},
    ::Type{MArray{S2, T2}},
) where {S1, T1, S2, T2} = MArray{S, promote_type(T1, T2)} where {S}
DataLayouts.promote_parent_array_type(
    ::Type{MArray{S1, T1} where {S1}},
    ::Type{MArray{S2, T2}},
) where {T1, S2, T2} = MArray{S, promote_type(T1, T2)} where {S}
DataLayouts.promote_parent_array_type(
    ::Type{MArray{S1, T1}},
    ::Type{MArray{S2, T2} where {S2}},
) where {S1, T1, T2} = MArray{S, promote_type(T1, T2)} where {S}

# allow on-device use of lazy broadcast objects with different type params
DataLayouts.promote_parent_array_type(
    ::Type{CUDA.CuDeviceArray{T1, N, B1} where {N}},
    ::Type{CUDA.CuDeviceArray{T2, N, B2} where {N}},
) where {T1, T2, B1, B2} = CUDA.CuDeviceArray{promote_type(T1, T2), N, B} where {N, B}

# allow on-device use of lazy broadcast objects with different type params
DataLayouts.promote_parent_array_type(
    ::Type{CUDA.CuDeviceArray{T1}},
    ::Type{CUDA.CuDeviceArray{T2, N, B2} where {N}},
) where {T1, T2, B2} = CUDA.CuDeviceArray{promote_type(T1, T2), N, B} where {N, B}

DataLayouts.promote_parent_array_type(
    ::Type{CUDA.CuDeviceArray{T1, N, B1} where {N}},
    ::Type{CUDA.CuDeviceArray{T2} where {N}},
) where {T1, T2, B1} = CUDA.CuDeviceArray{promote_type(T1, T2), N, B} where {N, B}

# Specialize to allow on-device call of `device` for `DeviceExtrudedFiniteDifferenceGrid`
ClimaComms.device(grid::Grids.DeviceExtrudedFiniteDifferenceGrid) =
    ClimaComms.device(Grids.vertical_topology(grid))

# The existing implementation limits our ability to apply the same expressions from within kernels
ClimaComms.device(topology::Topologies.DeviceIntervalTopology) = ClimaComms.CUDADevice()

Fields.error_mismatched_spaces(::Type, ::Type) = nothing # causes unsupported dynamic function invocation

import ClimaAtmos: C1, C2, C12, C3, C123, CT1, CT2, CT12, CT3, CT123, UVW
import ClimaAtmos:
    div‚Çï, wdiv‚Çï, grad‚Çï, wgrad‚Çï, curl‚Çï, wcurl‚Çï, ·∂úinterp, ·∂údiv·µ•, ·∂úgrad·µ•
import ClimaAtmos: ·∂†interp, ·∂†grad·µ•, ·∂†curl·µ•, ·∂úinterp_matrix, ·∂†grad·µ•_matrix
import ClimaAtmos: ·∂úadvdiv·µ•, ·∂úadvdiv·µ•_matrix, ·∂†winterp, ·∂†interp_matrix

Fields.local_geometry_field(bc::Base.Broadcast.Broadcasted) =
    Fields.local_geometry_field(axes(bc))

·∂útendencies(œÅ, u‚Çï, œÅe_tot) = (; œÅ, u‚Çï, œÅe_tot)
·∂†tendencies(u‚ÇÉ) = (; u‚ÇÉ)

@inline is_valid_index(us, I) = 1 ‚â§ I ‚â§ DataLayouts.get_N(us)
@inline is_valid_index_KA(us, ui) = 1 ‚â§ ui[4] ‚â§ DataLayouts.get_Nv(us)
@inline function is_valid_index_md(us, Nv, I)
    v = vindex()
    return 1 ‚â§ v ‚â§ Nv && is_valid_index(us, I)
end

function implicit_tendency_bc!(Y‚Çú, Y, p, t)
    Y‚Çú .= zero(eltype(Y‚Çú))
    set_precomputed_quantities!(Y, p, t)
    (; rayleigh_sponge, params, dt) = p
    (; ·∂úh_tot, ·∂†u¬≥, ·∂úp) = p.precomputed
    ·∂úJ = Fields.local_geometry_field(Y.c).J
    ·∂úz = Fields.coordinate_field(Y.c).z
    ·∂†z = Fields.coordinate_field(Y.f).z
    grav = FT(CAP.grav(params))
    zmax = CA.z_max(axes(Y.f))

    @. Y‚Çú.c.œÅ -= ·∂údiv·µ•(·∂†winterp(·∂úJ, Y.c.œÅ) * ·∂†u¬≥)
    # Central advection of active tracers (e_tot and q_tot)
    Y‚Çú.c.œÅe_tot .+= CA.vertical_transport(Y.c.œÅ, ·∂†u¬≥, ·∂úh_tot, dt, Val(:none))
    @. Y‚Çú.f.u‚ÇÉ -= ·∂†grad·µ•(·∂úp) / ·∂†interp(Y.c.œÅ) + ·∂†grad·µ•(Œ¶(grav, ·∂úz))

    @. Y‚Çú.f.u‚ÇÉ -= CA.Œ≤_rayleigh_w(rayleigh_sponge, ·∂†z, zmax) * Y.f.u‚ÇÉ
    return nothing
end

# Define tendency functions
# implicit_tendency!(@nospecialize(Y‚Çú), @nospecialize(Y), @nospecialize(p), @nospecialize(t)) =
#     implicit_tendency_KA!(Y‚Çú, Y, p, t)
implicit_tendency!(Y‚Çú, Y, p, t) = implicit_tendency_cuda_md_launch!(Y‚Çú, Y, p, t)

function implicit_tendency_cuda_md_launch!(Y‚Çú, Y, p, t)
    ·∂úspace = axes(Y.c)
    ·∂†space = Spaces.face_space(·∂úspace)
    ·∂†Nv = Spaces.nlevels(·∂†space)
    ·∂úcf = Fields.coordinate_field(·∂úspace)
    us = DataLayouts.UniversalSize(Fields.field_values(·∂úcf))
    (Ni, Nj, _, _, Nh) = DataLayouts.universal_size(us)
    nitems = Ni * Nj * 1 * ·∂†Nv * Nh
    ·∂úY‚Çú = Y‚Çú.c
    ·∂†Y‚Çú = Y‚Çú.f
    ·∂úY = Y.c
    ·∂†Y = Y.f
    (; rayleigh_sponge, params, dt) = p
    p_kernel = (; rayleigh_sponge, params, dt)
    zmax = Spaces.z_max(axes(·∂†Y)) # DeviceIntervalTopology does not have mesh, and therefore cannot compute zmax
    
    kernel = CUDA.@cuda(
        always_inline = true,
        launch = false,
        implicit_tendency_kernel_cuda_md_launch!(·∂úY‚Çú, ·∂†Y‚Çú, ·∂úY, ·∂†Y, p_kernel, t, zmax)
    )
    threads = (·∂†Nv, )
    blocks = (Nh, 1, Ni * Nj)
    kernel(·∂úY‚Çú, ·∂†Y‚Çú, ·∂úY, ·∂†Y, p_kernel, t, zmax; threads, blocks)
end

function implicit_tendency_kernel_cuda_md_launch!(·∂úY‚Çú, ·∂†Y‚Çú, _·∂úY, _·∂†Y, p, t, zmax)
    ·∂úY_fv = Fields.field_values(_·∂úY)
    ·∂†Y_fv = Fields.field_values(_·∂†Y)
    FT = Spaces.undertype(axes(_·∂úY))
    ·∂úNv = Spaces.nlevels(axes(_·∂úY))
    ·∂†Nv = Spaces.nlevels(axes(_·∂†Y))
    ·∂úus = DataLayouts.UniversalSize(·∂úY_fv)
    ·∂†us = DataLayouts.UniversalSize(·∂†Y_fv)
    (Ni, Nj, _, _, Nh) = DataLayouts.universal_size(·∂†us)
    ·∂úTS = DataLayouts.typesize(FT, eltype(·∂úY_fv))
    ·∂†TS = DataLayouts.typesize(FT, eltype(·∂†Y_fv))
    ·∂úlg = Spaces.local_geometry_data(axes(_·∂úY))
    ·∂†lg = Spaces.local_geometry_data(axes(_·∂†Y))
    ·∂úTS_lg = DataLayouts.typesize(FT, eltype(·∂úlg))

    ·∂úui = universal_index_cuda(·∂úus)
    ·∂†ui = universal_index_cuda(·∂†us)
    # ilc = @index(Local, Cartesian)
    # igc = @index(Group, Cartesian)
    # gs = @groupsize()
    # ·∂úui = universal_index_KA(·∂†us, ilc, igc, gs)
    # ·∂†ui = universal_index_KA(·∂†us, ilc, igc, gs)

    ·∂úY_arr = CUDA.CuStaticSharedArray(FT, (·∂úNv, ·∂úTS)) # ·∂úY_arr = @localmem FT (·∂úNv, ·∂úTS)
    ·∂†Y_arr = CUDA.CuStaticSharedArray(FT, (·∂†Nv, ·∂†TS)) # ·∂†Y_arr = @localmem FT (·∂†Nv, ·∂†TS)
    ·∂údata_col = rebuild_column(·∂úY_fv, ·∂úY_arr)
    ·∂†data_col = rebuild_column(·∂†Y_fv, ·∂†Y_arr)
    
    ·∂úlg_arr = CUDA.CuStaticSharedArray(FT, (·∂úNv, ·∂úTS_lg)) # ·∂úlg_arr = @localmem FT (·∂úNv, ·∂úTS_lg)
    ·∂†lg_arr = CUDA.CuStaticSharedArray(FT, (·∂†Nv, ·∂úTS_lg)) # ·∂†lg_arr = @localmem FT (·∂†Nv, ·∂úTS_lg)

    (·∂úspace_col, ·∂†space_col) = column_spaces_KA(_·∂úY, _·∂†Y, ·∂†ui, ·∂úlg_arr, ·∂†lg_arr)

    is_valid_index_KA(·∂úus, ·∂úui) && (·∂údata_col[·∂úui] = ·∂úY_fv[·∂úui])
    is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†data_col[·∂†ui] = ·∂†Y_fv[·∂†ui])

    ·∂úlg_col = Spaces.local_geometry_data(·∂úspace_col)
    ·∂†lg_col = Spaces.local_geometry_data(·∂†space_col)
    # is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col[·∂úui] = ·∂úlg[·∂úui])
    # is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†lg_col[·∂†ui] = ·∂†lg[·∂†ui])

    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.coordinates.z[·∂úui] = ·∂úlg.coordinates.z[·∂úui]) # needed
    is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†lg_col.coordinates.z[·∂†ui] = ·∂†lg.coordinates.z[·∂†ui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.J[·∂úui] = ·∂úlg.J[·∂úui]) # needed
    is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†lg_col.J[·∂†ui] = ·∂†lg.J[·∂†ui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.invJ[·∂úui] = ·∂úlg.invJ[·∂úui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.g‚Å± ≤.components.data.:1[·∂úui] = ·∂úlg.g‚Å± ≤.components.data.:1[·∂úui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.g‚Å± ≤.components.data.:2[·∂úui] = ·∂úlg.g‚Å± ≤.components.data.:2[·∂úui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.g‚Å± ≤.components.data.:3[·∂úui] = ·∂úlg.g‚Å± ≤.components.data.:3[·∂úui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.g‚Å± ≤.components.data.:4[·∂úui] = ·∂úlg.g‚Å± ≤.components.data.:4[·∂úui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.g‚Å± ≤.components.data.:5[·∂úui] = ·∂úlg.g‚Å± ≤.components.data.:5[·∂úui]) # needed
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col.g‚Å± ≤.components.data.:6[·∂úui] = ·∂úlg.g‚Å± ≤.components.data.:6[·∂úui]) # needed
    is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†lg_col.g‚Å± ≤.components.data.:9[·∂†ui] = ·∂†lg.g‚Å± ≤.components.data.:9[·∂†ui]) # needed

    CUDA.sync_threads()

    # ilc = @index(Local, Cartesian)
    # igc = @index(Group, Cartesian)
    # gs = @groupsize()
    # ·∂úui = universal_index_KA(·∂†us, ilc, igc, gs)
    # ·∂†ui = universal_index_KA(·∂†us, ilc, igc, gs)

    ·∂údata_col = rebuild_column(·∂úY_fv, ·∂úY_arr)
    ·∂†data_col = rebuild_column(·∂†Y_fv, ·∂†Y_arr)

    # (·∂úspace_col, ·∂†space_col) = column_spaces_KA(_·∂úY, _·∂†Y, ·∂†ui, ·∂úlg_arr, ·∂†lg_arr)

    if is_valid_index_KA(·∂úus, ·∂úui)
        (·∂úY, ·∂†Y) = column_states(_·∂úY, _·∂†Y, ·∂údata_col, ·∂†data_col, ·∂†ui, ·∂úspace_col, ·∂†space_col)
        ·∂úbc = ·∂úimplicit_tendency_bc(·∂úY, ·∂†Y, p, t, zmax)
        (·∂úidx, ·∂úhidx) = operator_inds(axes(·∂úY), ·∂úui)
        Fields.field_values(·∂úY‚Çú)[·∂úui] = Operators.getidx(axes(·∂úY), ·∂úbc, ·∂úidx, ·∂úhidx)
        # ·∂úY‚Çú[·∂úui] = ·∂úimplicit_tendency_bc(·∂úY, ·∂†Y, p, t)[·∂úui] # might be possible?
    end
    if is_valid_index_KA(·∂†us, ·∂†ui)
        (·∂úY, ·∂†Y) = column_states(_·∂úY, _·∂†Y, ·∂údata_col, ·∂†data_col, ·∂†ui, ·∂úspace_col, ·∂†space_col)
        ·∂†bc = ·∂†implicit_tendency_bc(·∂úY, ·∂†Y, p, t, zmax)
        (·∂†idx, ·∂†hidx) = operator_inds(axes(·∂†Y), ·∂†ui)
        Fields.field_values(·∂†Y‚Çú)[·∂†ui] = Operators.getidx(axes(·∂†Y), ·∂†bc, ·∂†idx, ·∂†hidx)
        # ·∂†Y‚Çú[·∂†ui] = ·∂†implicit_tendency_bc(·∂úY, ·∂†Y, p, t)[·∂†ui] # might be possible?
    end
    return nothing
end

@inline function universal_index_cuda(us)
    (tv,) = CUDA.threadIdx()
    (h, bv, ij) = CUDA.blockIdx()
    v = tv + (bv - 1) * CUDA.blockDim().x
    (Ni, Nj, _, _, _) = DataLayouts.universal_size(us)
    if Ni * Nj < ij
        return CartesianIndex((-1, -1, 1, -1, -1))
    end
    @inbounds (i, j) = CartesianIndices((Ni, Nj))[ij].I
    return CartesianIndex((i, j, 1, v, h))
end

@inline function universal_index_KA(
        us,
        ilc, # @index(Local, Cartesian)
        igc, # @index(Group, Cartesian)
        gs, # @groupsize()
    )
    @inbounds begin
        tv = ilc[1]
        (h, bv, ij) = igc.I
        v = tv + (bv - 1) * gs[1]
        (Ni, Nj, _, _, _) = DataLayouts.universal_size(us)
        if Ni * Nj < ij
            ui = CartesianIndex((-1, -1, 1, -1, -1))
        else
            @inbounds (i, j) = CartesianIndices((Ni, Nj))[ij].I
            ui = CartesianIndex((i, j, 1, v, h))
        end
        return ui
    end
end

function implicit_tendency_KA!(@nospecialize(Y‚Çú), @nospecialize(Y), @nospecialize(p), @nospecialize(t))
    ·∂úspace = axes(Y.c)
    ·∂†space = Spaces.face_space(·∂úspace)
    ·∂†Nv = Spaces.nlevels(·∂†space)
    ·∂úcf = Fields.coordinate_field(·∂úspace)
    us = DataLayouts.UniversalSize(Fields.field_values(·∂úcf))
    (Ni, Nj, _, _, Nh) = DataLayouts.universal_size(us)
    nitems = Ni * Nj * 1 * ·∂†Nv * Nh
    ·∂úY‚Çú = Y‚Çú.c
    ·∂†Y‚Çú = Y‚Çú.f
    ·∂úY = Y.c
    ·∂†Y = Y.f
    (; rayleigh_sponge, params, dt) = p
    p_kernel = (; rayleigh_sponge, params, dt)
    zmax = Spaces.z_max(axes(·∂†Y)) # DeviceIntervalTopology does not have mesh, and therefore cannot compute zmax

    backend = if ClimaComms.device(·∂úspace) isa ClimaComms.CUDADevice
        CUDABackend()
    else
        KA.CPU()
    end
    threads = (·∂†Nv, )
    blocks = (·∂†Nv * Nh, 1, Ni * Nj)
    kernel = implicit_tendency_kernel_KA!(backend, threads, blocks)
    # ndrange = (·∂†Nv, Ni * Nj * Nh)
    # @show ·∂†Nv, Ni, Nj, Nh, prod(blocks)
    kernel(·∂úY‚Çú, ·∂†Y‚Çú, ·∂úY, ·∂†Y, p_kernel, t, zmax, ndrange = blocks)
end
@kernel function implicit_tendency_kernel_KA!(·∂úY‚Çú, ·∂†Y‚Çú, _·∂úY, _·∂†Y, @Const(p), @Const(t), @Const(zmax))
    ·∂úY_fv = @uniform Fields.field_values(_·∂úY)
    ·∂†Y_fv = @uniform Fields.field_values(_·∂†Y)
    FT = @uniform Spaces.undertype(axes(_·∂úY))
    ·∂úNv = @uniform Spaces.nlevels(axes(_·∂úY))
    ·∂†Nv = @uniform Spaces.nlevels(axes(_·∂†Y))
    ·∂úus = @uniform DataLayouts.UniversalSize(·∂úY_fv)
    ·∂†us = @uniform DataLayouts.UniversalSize(·∂†Y_fv)
    (Ni, Nj, _, _, Nh) = @uniform DataLayouts.universal_size(·∂†us)
    ·∂úTS = @uniform DataLayouts.typesize(FT, eltype(·∂úY_fv))
    ·∂†TS = @uniform DataLayouts.typesize(FT, eltype(·∂†Y_fv))
    ·∂úlg = @uniform Spaces.local_geometry_data(axes(_·∂úY))
    ·∂†lg = @uniform Spaces.local_geometry_data(axes(_·∂†Y))
    ·∂úTS_lg = @uniform DataLayouts.typesize(FT, eltype(·∂úlg))

    ilc = @index(Local, Cartesian)
    igc = @index(Group, Cartesian)
    gs = @groupsize()
    ·∂úui = universal_index_KA(·∂†us, ilc, igc, gs)
    ·∂†ui = universal_index_KA(·∂†us, ilc, igc, gs)

    # @print("·∂úui = $(·∂úui.I)\n")
    ·∂úY_arr = @localmem FT (·∂úNv, ·∂úTS)
    ·∂†Y_arr = @localmem FT (·∂†Nv, ·∂†TS)
    ·∂údata_col = rebuild_column(·∂úY_fv, ·∂úY_arr)
    ·∂†data_col = rebuild_column(·∂†Y_fv, ·∂†Y_arr)
    
    ·∂úlg_arr = @localmem FT (·∂úNv, ·∂úTS_lg)
    ·∂†lg_arr = @localmem FT (·∂†Nv, ·∂úTS_lg)

    (·∂úspace_col, ·∂†space_col) = column_spaces_KA(_·∂úY, _·∂†Y, ·∂†ui, ·∂úlg_arr, ·∂†lg_arr)

    is_valid_index_KA(·∂úus, ·∂úui) && (·∂údata_col[·∂úui] = ·∂úY_fv[·∂úui])
    is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†data_col[·∂†ui] = ·∂†Y_fv[·∂†ui])

    ·∂úlg_col = Spaces.local_geometry_data(·∂úspace_col)
    ·∂†lg_col = Spaces.local_geometry_data(·∂†space_col)
    is_valid_index_KA(·∂úus, ·∂úui) && (·∂úlg_col[·∂úui] = ·∂úlg[·∂úui])
    is_valid_index_KA(·∂†us, ·∂†ui) && (·∂†lg_col[·∂†ui] = ·∂†lg[·∂†ui])

    @synchronize

    ilc = @index(Local, Cartesian)
    igc = @index(Group, Cartesian)
    gs = @groupsize()
    ·∂úui = universal_index_KA(·∂†us, ilc, igc, gs)
    ·∂†ui = universal_index_KA(·∂†us, ilc, igc, gs)

    ·∂údata_col = rebuild_column(·∂úY_fv, ·∂úY_arr)
    ·∂†data_col = rebuild_column(·∂†Y_fv, ·∂†Y_arr)

    (·∂úspace_col, ·∂†space_col) = column_spaces_KA(_·∂úY, _·∂†Y, ·∂†ui, ·∂úlg_arr, ·∂†lg_arr)

    if is_valid_index_KA(·∂úus, ·∂úui)
        (·∂úY, ·∂†Y) = column_states(_·∂úY, _·∂†Y, ·∂údata_col, ·∂†data_col, ·∂†ui, ·∂úspace_col, ·∂†space_col)
        ·∂úbc = ·∂úimplicit_tendency_bc(·∂úY, ·∂†Y, p, t, zmax)
        (·∂úidx, ·∂úhidx) = operator_inds(axes(·∂úY), ·∂úui)
        Fields.field_values(·∂úY‚Çú)[·∂úui] = Operators.getidx(axes(·∂úY), ·∂úbc, ·∂úidx, ·∂úhidx)
        # ·∂úY‚Çú[·∂úui] = ·∂úimplicit_tendency_bc(·∂úY, ·∂†Y, p, t)[·∂úui] # might be possible?
    end
    if is_valid_index_KA(·∂†us, ·∂†ui)
        (·∂úY, ·∂†Y) = column_states(_·∂úY, _·∂†Y, ·∂údata_col, ·∂†data_col, ·∂†ui, ·∂úspace_col, ·∂†space_col)
        ·∂†bc = ·∂†implicit_tendency_bc(·∂úY, ·∂†Y, p, t, zmax)
        (·∂†idx, ·∂†hidx) = operator_inds(axes(·∂†Y), ·∂†ui)
        Fields.field_values(·∂†Y‚Çú)[·∂†ui] = Operators.getidx(axes(·∂†Y), ·∂†bc, ·∂†idx, ·∂†hidx)
        # ·∂†Y‚Çú[·∂†ui] = ·∂†implicit_tendency_bc(·∂úY, ·∂†Y, p, t)[·∂†ui] # might be possible?
    end
end

@inline function operator_inds(space, I)
    li = Operators.left_idx(space)
    (i, j, _, v, h) = I.I
    hidx = (i, j, h)
    idx = v - 1 + li
    return (idx, hidx)
end

@inline cartesian_indices(field::Fields.Field) =
    cartesian_indices(Fields.field_values(field))
@inline cartesian_indices(data::DataLayouts.AbstractData) =
    cartesian_indices(DataLayouts.UniversalSize(data))
@inline cartesian_indices(us::DataLayouts.UniversalSize) =
    CartesianIndices(map(Base.OneTo, DataLayouts.universal_size(us)))
@inline universal_index(x) = cartesian_indices(x)


function thermo_state(thermo_params, ·∂úœÅ, ·∂úœÅe_tot, ·∂úK, grav, ·∂úz)
    return @. lazy(TD.PhaseDry_œÅe(
            thermo_params,
            ·∂úœÅ,
            ·∂úœÅe_tot / ·∂úœÅ - ·∂úK - Œ¶(grav, ·∂úz),
        ))
end

# Drop everything except Nv and S:
@inline column_type_params(data::DataLayouts.AbstractData) = column_type_params(typeof(data))
@inline column_type_params(::Type{DataLayouts.IJFH{S, Nij, A}}) where {S, Nij, A} = (S, )
@inline column_type_params(::Type{DataLayouts.IJHF{S, Nij, A}}) where {S, Nij, A} = (S, )
@inline column_type_params(::Type{DataLayouts.IFH{S, Ni, A}}) where {S, Ni, A} = (S, )
@inline column_type_params(::Type{DataLayouts.IHF{S, Ni, A}}) where {S, Ni, A} = (S, )
@inline column_type_params(::Type{DataLayouts.DataF{S, A}}) where {S, A} = (S,)
@inline column_type_params(::Type{DataLayouts.IJF{S, Nij, A}}) where {S, Nij, A} = (S, )
@inline column_type_params(::Type{DataLayouts.IF{S, Ni, A}}) where {S, Ni, A} = (S, )
@inline column_type_params(::Type{DataLayouts.VF{S, Nv, A}}) where {S, Nv, A} = (S, Nv)
@inline column_type_params(::Type{DataLayouts.VIJFH{S, Nv, Nij, A}}) where {S, Nv, Nij, A} = (S, Nv)
@inline column_type_params(::Type{DataLayouts.VIJHF{S, Nv, Nij, A}}) where {S, Nv, Nij, A} = (S, Nv)
@inline column_type_params(::Type{DataLayouts.VIFH{S, Nv, Ni, A}}) where {S, Nv, Ni, A} = (S, Nv)
@inline column_type_params(::Type{DataLayouts.VIHF{S, Nv, Ni, A}}) where {S, Nv, Ni, A} = (S, Nv)

# Drop everything except V and F:
@inline column_singleton(::DataLayouts.IJFH) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.IJHF) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.IFH) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.IHF) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.DataF) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.IJF) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.IF) = DataLayouts.DataFSingleton()
@inline column_singleton(::DataLayouts.VF) = DataLayouts.VFSingleton()
@inline column_singleton(::DataLayouts.VIJFH) = DataLayouts.VFSingleton()
@inline column_singleton(::DataLayouts.VIJHF) = DataLayouts.VFSingleton()
@inline column_singleton(::DataLayouts.VIFH) = DataLayouts.VFSingleton()
@inline column_singleton(::DataLayouts.VIHF) = DataLayouts.VFSingleton()

function rebuild_column(data, array::AbstractArray)
    s_column = column_singleton(data)
    return DataLayouts.union_all(s_column){column_type_params(data)...}(array)
end

function column_lg_shmem(f, ui)
    (i, j, _, _, h) = ui.I
    colidx = Grids.ColumnIndex((i, j), h)
    lg = Spaces.local_geometry_data(axes(f))
    lg_col = Spaces.column(lg, colidx)
    FT = Spaces.undertype(axes(f))
    Nv = Spaces.nlevels(axes(f))
    TS = DataLayouts.typesize(FT, eltype(lg_col))
    lg_arr = CUDA.CuStaticSharedArray(FT, (Nv, TS))
    return rebuild_column(lg_col, lg_arr)
end

function column_lg_shmem_KA(f, ui, lg_arr)
    (i, j, _, _, h) = ui.I
    colidx = Grids.ColumnIndex((i, j), h)
    lg = Spaces.local_geometry_data(axes(f))
    lg_col = Spaces.column(lg, colidx)
    return rebuild_column(lg_col, lg_arr)
end

function column_spaces(·∂úY, ·∂†Y, ui)
    (i, j, _, _, h) = ui.I
    colidx = Grids.ColumnIndex((i, j), h)
    ·∂úlg_col = column_lg_shmem(·∂úY, ui)
    ·∂†lg_col = column_lg_shmem(·∂†Y, ui)
    col_space = Spaces.column(axes(·∂úY), colidx)
    col_grid = Spaces.grid(col_space)
    if col_grid isa Grids.ColumnGrid && col_grid.full_grid isa Grids.DeviceExtrudedFiniteDifferenceGrid
        (; full_grid) = col_grid
        (; vertical_topology, global_geometry) = full_grid
        col_grid_shmem = Grids.DeviceFiniteDifferenceGrid(vertical_topology, global_geometry, ·∂úlg_col, ·∂†lg_col)
        ·∂úspace_col = Spaces.space(col_grid_shmem, Grids.CellCenter())
        ·∂†space_col = Spaces.space(col_grid_shmem, Grids.CellFace())
    else
        ·∂úspace_col = nothing
        ·∂†space_col = nothing
    end
    return (·∂úspace_col, ·∂†space_col)
end

function column_spaces_KA(·∂úY, ·∂†Y, ui, ·∂úlg_arr, ·∂†lg_arr)
    (i, j, _, _, h) = ui.I
    colidx = Grids.ColumnIndex((i, j), h)
    ·∂úlg_col = column_lg_shmem_KA(·∂úY, ui, ·∂úlg_arr)
    ·∂†lg_col = column_lg_shmem_KA(·∂†Y, ui, ·∂†lg_arr)
    col_space = Spaces.column(axes(·∂úY), colidx)
    col_grid = Spaces.grid(col_space)
    if col_grid isa Grids.ColumnGrid && col_grid.full_grid isa Grids.DeviceExtrudedFiniteDifferenceGrid
        (; full_grid) = col_grid
        (; vertical_topology, global_geometry) = full_grid
        col_grid_shmem = Grids.DeviceFiniteDifferenceGrid(vertical_topology, global_geometry, ·∂úlg_col, ·∂†lg_col)
        ·∂úspace_col = Spaces.space(col_grid_shmem, Grids.CellCenter())
        ·∂†space_col = Spaces.space(col_grid_shmem, Grids.CellFace())
    elseif col_grid isa Grids.ColumnGrid && col_grid.full_grid isa Grids.ExtrudedFiniteDifferenceGrid
        (; full_grid) = col_grid
        (; vertical_grid, global_geometry) = full_grid
        col_grid_shmem = Grids.FiniteDifferenceGrid(vertical_grid.topology, global_geometry, ·∂úlg_col, ·∂†lg_col)
        ·∂úspace_col = Spaces.space(col_grid_shmem, Grids.CellCenter())
        ·∂†space_col = Spaces.space(col_grid_shmem, Grids.CellFace())
    else
        error("Uncaught case")
    end
    return (·∂úspace_col, ·∂†space_col)
end

function column_states(·∂úY, ·∂†Y, ·∂údata_col, ·∂†data_col, ui, ·∂úspace_col, ·∂†space_col)
    ·∂úY_col = Fields.Field(·∂údata_col, ·∂úspace_col)
    ·∂†Y_col = Fields.Field(·∂†data_col, ·∂†space_col)
    return (·∂úY_col, ·∂†Y_col)
end

function vindex()
    (tv,) = CUDA.threadIdx()
    (h, bv, ij) = CUDA.blockIdx()
    v = tv + (bv - 1) * CUDA.blockDim().x
    return v
end

function ·∂úimplicit_tendency_bc(·∂úY, ·∂†Y, p, t, zmax)
    (; rayleigh_sponge, params, dt) = p
    ·∂úz = Fields.coordinate_field(·∂úY).z
    ·∂úJ = Fields.local_geometry_field(·∂úY).J
    ·∂†z = Fields.coordinate_field(·∂†Y).z
    FT = Spaces.undertype(axes(·∂úY))
    grav = FT(CAP.grav(params))
    thermo_params = CAP.thermodynamics_params(params)
    ·∂úœÅ = ·∂úY.œÅ
    ·∂úœÅe_tot = ·∂úY.œÅe_tot
    ·∂úu‚Çï = ·∂úY.u‚Çï
    ·∂†u‚ÇÉ = ·∂†Y.u‚ÇÉ

    ·∂úK = CA.compute_kinetic(·∂úu‚Çï, ·∂†u‚ÇÉ)
    ·∂úts = thermo_state(thermo_params, ·∂úœÅ, ·∂úœÅe_tot, ·∂úK, grav, ·∂úz)
    ·∂úp = @. lazy(TD.air_pressure(thermo_params, ·∂úts))
    ·∂úh_tot = @. lazy(TD.total_specific_enthalpy(thermo_params, ·∂úts, ·∂úœÅe_tot / ·∂úœÅ))
    # Central advection of active tracers (e_tot and q_tot)
    ·∂†u‚Çï¬≥ = @. lazy(·∂†winterp(·∂úœÅ * ·∂úJ, CT3(·∂úu‚Çï)))
    ·∂†u¬≥ = @. lazy(·∂†u‚Çï¬≥ + CT3(·∂†u‚ÇÉ))
    tend_œÅ_1 = @. lazy( - ·∂údiv·µ•(·∂†winterp(·∂úJ, ·∂úœÅ) * ·∂†u‚Çï¬≥))
    tend_œÅe_tot_1 = CA.vertical_transport(·∂úœÅ, ·∂†u¬≥, ·∂úh_tot, dt, Val(:none))
    ·∂úu‚Çï‚ÇÄ = (zero(eltype(·∂úu‚Çï)),)

    return @. lazy(·∂útendencies(
        tend_œÅ_1,
        - ·∂úu‚Çï‚ÇÄ,
        tend_œÅe_tot_1,
    ))
end

function ·∂†implicit_tendency_bc(·∂úY, ·∂†Y, p, t, zmax)
    (; rayleigh_sponge, params) = p
    ·∂úz = Fields.coordinate_field(·∂úY).z
    ·∂†z = Fields.coordinate_field(·∂†Y).z
    FT = Spaces.undertype(axes(·∂úY))
    grav = FT(CAP.grav(params))
    thermo_params = CAP.thermodynamics_params(params)
    ·∂úœÅ = ·∂úY.œÅ
    ·∂úœÅe_tot = ·∂úY.œÅe_tot
    ·∂úu‚Çï = ·∂úY.u‚Çï
    ·∂†u‚ÇÉ = ·∂†Y.u‚ÇÉ
    ·∂úK = CA.compute_kinetic(·∂úu‚Çï, ·∂†u‚ÇÉ)
    ·∂úts = thermo_state(thermo_params, ·∂úœÅ, ·∂úœÅe_tot, ·∂úK, grav, ·∂úz)
    ·∂úp = @. lazy(TD.air_pressure(thermo_params, ·∂úts))
    bc1 = @. lazy(- (·∂†grad·µ•(·∂úp) / ·∂†interp(·∂úœÅ) + ·∂†grad·µ•(Œ¶(grav, ·∂úz))))
    bc2 = @. lazy(- CA.Œ≤_rayleigh_w(rayleigh_sponge, ·∂†z, zmax) * ·∂†u‚ÇÉ)
    return @. lazy(·∂†tendencies(bc1 + bc2))
end

function ImplicitEquationJacobian(
    Y::Fields.FieldVector;
    approximate_solve_iters = 1,
    transform_flag = false,
)
    FT = Spaces.undertype(axes(Y.c))
    CTh = CA.CTh_vector_type(axes(Y.c))

    BidiagonalRow_C3 = MatrixFields.BidiagonalMatrixRow{CA.C3{FT}}
    BidiagonalRow_ACT3 =
        MatrixFields.BidiagonalMatrixRow{LA.Adjoint{FT, CA.CT3{FT}}}
    BidiagonalRow_C3xACTh = MatrixFields.BidiagonalMatrixRow{
        typeof(zero(CA.C3{FT}) * zero(CTh{FT})'),
    }
    TridiagonalRow_C3xACT3 = MatrixFields.TridiagonalMatrixRow{
        typeof(zero(CA.C3{FT}) * zero(CA.CT3{FT})'),
    }

    is_in_Y(name) = MatrixFields.has_field(Y, name)

    sfc_if_available = is_in_Y(@name(sfc)) ? (@name(sfc),) : ()


    # Note: We have to use FT(-1) * I instead of -I because inv(-1) == -1.0,
    # which means that multiplying inv(-1) by a Float32 will yield a Float64.
    identity_blocks = MatrixFields.unrolled_map(
        name -> (name, name) => FT(-1) * LA.I,
        (@name(c.œÅ), sfc_if_available...),
    )

    active_scalar_names = (@name(c.œÅ), @name(c.œÅe_tot))
    advection_blocks = (
        MatrixFields.unrolled_map(
            name -> (name, @name(f.u‚ÇÉ)) => similar(Y.c, BidiagonalRow_ACT3),
            active_scalar_names,
        )...,
        MatrixFields.unrolled_map(
            name -> (@name(f.u‚ÇÉ), name) => similar(Y.f, BidiagonalRow_C3),
            active_scalar_names,
        )...,
        (@name(f.u‚ÇÉ), @name(c.u‚Çï)) => similar(Y.f, BidiagonalRow_C3xACTh),
        (@name(f.u‚ÇÉ), @name(f.u‚ÇÉ)) => similar(Y.f, TridiagonalRow_C3xACT3),
    )

    diffused_scalar_names = (@name(c.œÅe_tot),)
    diffusion_blocks = MatrixFields.unrolled_map(
        name -> (name, name) => FT(-1) * LA.I,
        (diffused_scalar_names..., @name(c.u‚Çï)),
    )

    matrix = MatrixFields.FieldMatrix(
        identity_blocks...,
        advection_blocks...,
        diffusion_blocks...,
    )

    names‚ÇÅ_group‚ÇÅ = (@name(c.œÅ), sfc_if_available...)
    names‚ÇÅ_group‚ÇÉ = (@name(c.œÅe_tot),)
    names‚ÇÅ = (names‚ÇÅ_group‚ÇÅ..., names‚ÇÅ_group‚ÇÉ...)

    alg‚ÇÇ = MatrixFields.BlockLowerTriangularSolve(@name(c.u‚Çï))
    alg = MatrixFields.BlockArrowheadSolve(names‚ÇÅ...; alg‚ÇÇ)

    return CA.ImplicitEquationJacobian(
        matrix,
        MatrixFields.FieldMatrixSolver(alg, matrix, Y),
        CA.IgnoreDerivative(), # diffusion_flag
        CA.IgnoreDerivative(), # topography_flag
        CA.IgnoreDerivative(), # sgs_advection_flag
        CA.IgnoreDerivative(), # sgs_entr_detr_flag
        CA.IgnoreDerivative(), # sgs_nh_pressure_flag
        CA.IgnoreDerivative(), # sgs_mass_flux_flag
        similar(Y),
        similar(Y),
        transform_flag,
        Ref{FT}(),
    )
end

function Wfact!(A, Y, p, dtŒ≥, t)
    FT = Spaces.undertype(axes(Y.c))
    dtŒ≥‚Ä≤ = FT(float(dtŒ≥))
    A.dtŒ≥_ref[] = dtŒ≥‚Ä≤
    update_implicit_equation_jacobian!(A, Y, p, dtŒ≥‚Ä≤)
end

Œ¶(grav, z) = grav * z

function update_implicit_equation_jacobian!(A, Y, p, dtŒ≥)
    (; matrix) = A
    (; ·∂úK, ·∂úts, ·∂úp, ·∂úh_tot) = p.precomputed
    (; ‚àÇ·∂úK_‚àÇ·∂úu‚Çï, ‚àÇ·∂úK_‚àÇ·∂†u‚ÇÉ, ·∂†p_grad_matrix, ·∂úadvection_matrix) = p
    (; params) = p

    FT = Spaces.undertype(axes(Y.c))
    CTh = CA.CTh_vector_type(axes(Y.c))
    one_C3xACT3 = C3(FT(1)) * CT3(FT(1))'
    rs = p.rayleigh_sponge
    ·∂†z = Fields.coordinate_field(Y.f).z
    zmax = CA.z_max(axes(Y.f))

    T_0 = FT(CAP.T_0(params))
    cp_d = FT(CAP.cp_d(params))
    thermo_params = CAP.thermodynamics_params(params)
    ·∂úz = Fields.coordinate_field(Y.c).z
    grav = FT(CAP.grav(params))

    ·∂úœÅ = Y.c.œÅ
    ·∂úu‚Çï = Y.c.u‚Çï
    ·∂†u‚ÇÉ = Y.f.u‚ÇÉ
    ·∂úJ = Fields.local_geometry_field(Y.c).J
    ·∂†g‚Å± ≤ = Fields.local_geometry_field(Y.f).g‚Å± ≤

    ·∂úkappa_m = p.·∂útemp_scalar
    @. ·∂úkappa_m =
        TD.gas_constant_air(thermo_params, ·∂úts) / TD.cv_m(thermo_params, ·∂úts)

    @. ‚àÇ·∂úK_‚àÇ·∂úu‚Çï = DiagonalMatrixRow(adjoint(CTh(·∂úu‚Çï)))
    @. ‚àÇ·∂úK_‚àÇ·∂†u‚ÇÉ =
        ·∂úinterp_matrix() ‚ãÖ DiagonalMatrixRow(adjoint(CT3(·∂†u‚ÇÉ))) +
        DiagonalMatrixRow(adjoint(CT3(·∂úu‚Çï))) ‚ãÖ ·∂úinterp_matrix()

    @. ·∂†p_grad_matrix = DiagonalMatrixRow(-1 / ·∂†interp(·∂úœÅ)) ‚ãÖ ·∂†grad·µ•_matrix()

    @. ·∂úadvection_matrix =
        -(·∂úadvdiv·µ•_matrix()) ‚ãÖ DiagonalMatrixRow(·∂†winterp(·∂úJ, ·∂úœÅ))

    ‚àÇ·∂úœÅ_err_‚àÇ·∂†u‚ÇÉ = matrix[@name(c.œÅ), @name(f.u‚ÇÉ)]
    @. ‚àÇ·∂úœÅ_err_‚àÇ·∂†u‚ÇÉ = dtŒ≥ * ·∂úadvection_matrix ‚ãÖ DiagonalMatrixRow(CA.g¬≥¬≥(·∂†g‚Å± ≤))

    ‚àÇ·∂úœÅœá_err_‚àÇ·∂†u‚ÇÉ = matrix[@name(c.œÅe_tot), @name(f.u‚ÇÉ)]
    @. ‚àÇ·∂úœÅœá_err_‚àÇ·∂†u‚ÇÉ =
        dtŒ≥ * ·∂úadvection_matrix ‚ãÖ
        DiagonalMatrixRow(·∂†interp(·∂úh_tot) * CA.g¬≥¬≥(·∂†g‚Å± ≤))

    ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂úœÅ = matrix[@name(f.u‚ÇÉ), @name(c.œÅ)]
    ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂úœÅe_tot = matrix[@name(f.u‚ÇÉ), @name(c.œÅe_tot)]

    @. ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂úœÅ =
        dtŒ≥ * (
            ·∂†p_grad_matrix ‚ãÖ
            DiagonalMatrixRow(·∂úkappa_m * (T_0 * cp_d - ·∂úK - Œ¶(grav, ·∂úz))) +
            DiagonalMatrixRow(·∂†grad·µ•(·∂úp) / abs2(·∂†interp(·∂úœÅ))) ‚ãÖ
            ·∂†interp_matrix()
        )
    @. ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂úœÅe_tot = dtŒ≥ * ·∂†p_grad_matrix ‚ãÖ DiagonalMatrixRow(·∂úkappa_m)

    ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂úu‚Çï = matrix[@name(f.u‚ÇÉ), @name(c.u‚Çï)]
    ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂†u‚ÇÉ = matrix[@name(f.u‚ÇÉ), @name(f.u‚ÇÉ)]
    I_u‚ÇÉ = DiagonalMatrixRow(one_C3xACT3)
    @. ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂úu‚Çï =
        dtŒ≥ * ·∂†p_grad_matrix ‚ãÖ DiagonalMatrixRow(-(·∂úkappa_m) * ·∂úœÅ) ‚ãÖ ‚àÇ·∂úK_‚àÇ·∂úu‚Çï

    @. ‚àÇ·∂†u‚ÇÉ_err_‚àÇ·∂†u‚ÇÉ =
        dtŒ≥ * (
            ·∂†p_grad_matrix ‚ãÖ DiagonalMatrixRow(-(·∂úkappa_m) * ·∂úœÅ) ‚ãÖ ‚àÇ·∂úK_‚àÇ·∂†u‚ÇÉ +
            DiagonalMatrixRow(-CA.Œ≤_rayleigh_w(rs, ·∂†z, zmax) * (one_C3xACT3,))
        ) - (I_u‚ÇÉ,)

end

function set_precomputed_quantities!(Y, p, t)
    thermo_params = CAP.thermodynamics_params(p.params)
    (; ·∂úu, ·∂†u¬≥, ·∂†u, ·∂úK, ·∂úts, ·∂úp) = p.precomputed

    ·∂úœÅ = Y.c.œÅ
    ·∂úu‚Çï = Y.c.u‚Çï
    ·∂úz = Fields.coordinate_field(Y.c).z
    grav = FT(CAP.grav(params))
    ·∂†u‚ÇÉ = Y.f.u‚ÇÉ
    @. ·∂úu = C123(·∂úu‚Çï) + ·∂úinterp(C123(·∂†u‚ÇÉ))
    ·∂†u¬≥ .= CA.compute_·∂†u‚Çï¬≥(·∂úu‚Çï, ·∂úœÅ) .+ CT3.(·∂†u‚ÇÉ)
    ·∂úK .= CA.compute_kinetic(·∂úu‚Çï, ·∂†u‚ÇÉ)

    @. ·∂úts = TD.PhaseDry_œÅe(
        thermo_params,
        Y.c.œÅ,
        Y.c.œÅe_tot / Y.c.œÅ - ·∂úK - Œ¶(grav, ·∂úz),
    )
    @. ·∂úp = TD.air_pressure(thermo_params, ·∂úts)

    (; ·∂úh_tot) = p.precomputed
    @. ·∂úh_tot =
        TD.total_specific_enthalpy(thermo_params, ·∂úts, Y.c.œÅe_tot / Y.c.œÅ)
    return nothing
end

function dss!(Y, p, t)
    Spaces.weighted_dss!(Y.c => p.ghost_buffer.c, Y.f => p.ghost_buffer.f)
    return nothing
end

function remaining_tendency!(Y‚Çú, Y‚Çú_lim, Y, p, t)
    # Y‚Çú_lim .= zero(eltype(Y‚Çú_lim))
    Y‚Çú .= zero(eltype(Y‚Çú))
    (; dt, params, rayleigh_sponge) = p
    (; ·∂úh_tot) = p.precomputed
    (; ·∂†u¬≥, ·∂úu, ·∂úK, ·∂úp) = p.precomputed
    (; ·∂úf¬≥, ·∂†f¬π¬≤) = p.precomputed
    ·∂úz = Fields.coordinate_field(Y.c).z
    ·∂úJ = Fields.local_geometry_field(Y.c).J
    grav = FT(CAP.grav(params))
    ·∂úu‚Çï = Y.c.u‚Çï
    ·∂†u‚ÇÉ = Y.f.u‚ÇÉ
    ·∂úœÅ = Y.c.œÅ

    @. Y‚Çú.c.œÅ -= wdiv‚Çï(·∂úœÅ * ·∂úu)
    @. Y‚Çú.c.œÅe_tot -= wdiv‚Çï(·∂úœÅ * ·∂úh_tot * ·∂úu)
    @. Y‚Çú.c.u‚Çï -= C12(grad‚Çï(·∂úp) / ·∂úœÅ + grad‚Çï(·∂úK + Œ¶(grav, ·∂úz)))

    ·∂úœâ¬≥ = p.scratch.·∂útemp_CT3
    ·∂†œâ¬π¬≤ = p.scratch.·∂†temp_CT12

    point_type = eltype(Fields.coordinate_field(Y.c))
    if point_type <: Geometry.Abstract3DPoint
        @. ·∂úœâ¬≥ = curl‚Çï(·∂úu‚Çï)
    elseif point_type <: Geometry.Abstract2DPoint
        @. ·∂úœâ¬≥ = zero(·∂úœâ¬≥)
    end

    @. ·∂†œâ¬π¬≤ = ·∂†curl·µ•(·∂úu‚Çï)
    @. ·∂†œâ¬π¬≤ += CT12(curl‚Çï(·∂†u‚ÇÉ))
    # Without the CT12(), the right-hand side would be a CT1 or CT2 in 2D space.

    ·∂†œâ¬π¬≤‚Ä≤ = if isnothing(·∂†f¬π¬≤)
        ·∂†œâ¬π¬≤ # shallow atmosphere
    else
        @. lazy(·∂†f¬π¬≤ + ·∂†œâ¬π¬≤) # deep atmosphere
    end

    @. Y‚Çú.c.u‚Çï -=
        ·∂úinterp(·∂†œâ¬π¬≤‚Ä≤ √ó (·∂†interp(·∂úœÅ * ·∂úJ) * ·∂†u¬≥)) / (·∂úœÅ * ·∂úJ) +
        (·∂úf¬≥ + ·∂úœâ¬≥) √ó CT12(·∂úu)
    @. Y‚Çú.f.u‚ÇÉ -= ·∂†œâ¬π¬≤‚Ä≤ √ó ·∂†interp(CT12(·∂úu)) + ·∂†grad·µ•(·∂úK)

    Y‚Çú.c.u‚Çï .+= CA.rayleigh_sponge_tendency_u‚Çï(·∂úu‚Çï, rayleigh_sponge)

    return Y‚Çú
end

# This block:
# @time if !@isdefined(integrator)
    FT = Float64;
    if high_res
        ·∂úspace = ExtrudedCubedSphereSpace(
            FT;
            z_elem = 63,
            z_min = 0,
            z_max = 30000.0,
            radius = 6.371e6,
            h_elem = 30,
            n_quad_points = 4,
            staggering = CellCenter(),
        );
    else
        ·∂úspace = ExtrudedCubedSphereSpace(
            FT;
            z_elem = 8,
            z_min = 0,
            z_max = 30000.0,
            radius = 6.371e6,
            h_elem = 2,
            n_quad_points = 2,
            staggering = CellCenter(),
        );
    end
    ·∂†space = Spaces.face_space(·∂úspace);
    cnt = (; œÅ = zero(FT), u‚Çï = zero(CA.C12{FT}), œÅe_tot = zero(FT));
    Yc = Fields.fill(cnt, ·∂úspace);
    fill!(parent(Yc.œÅ), 1)
    fill!(parent(Yc.u‚Çï), 0.01)
    fill!(parent(Yc.œÅe_tot), 1000.0)
    Yf = Fields.fill((; u‚ÇÉ = zero(CA.C3{FT})), ·∂†space);
    Y = Fields.FieldVector(; c = Yc, f = Yf);

    A = ImplicitEquationJacobian(
        Y;
        approximate_solve_iters = 2,
        transform_flag = false, # assumes use_transform returns false
    )

    implicit_func = SciMLBase.ODEFunction(
        implicit_tendency!;
        jac_prototype = A,
        Wfact = Wfact!, # assumes use_transform returns false
        tgrad = (‚àÇY‚àÇt, Y, p, t) -> (‚àÇY‚àÇt .= 0),
    )

    func = CTS.ClimaODEFunction(;
        T_exp_T_lim! = remaining_tendency!,
        T_imp! = implicit_func,
        # Can we just pass implicit_tendency! and jac_prototype etc.?
        lim! = (Y, p, t, ref_Y) -> nothing, # limiters_func!
        dss!,
        cache! = set_precomputed_quantities!,
        cache_imp! = set_precomputed_quantities!,
    )

    newtons_method = CTS.NewtonsMethod(; max_iters = 2)
    params = CA.ClimaAtmosParameters(FT)
    ·∂†coord = Fields.coordinate_field(·∂†space);
    ·∂úcoord = Fields.coordinate_field(·∂úspace);
    (; ·∂úf¬≥, ·∂†f¬π¬≤) = CA.compute_coriolis(·∂úcoord, ·∂†coord, params);
    scratch = (;
        ·∂útemp_CT3 = Fields.Field(CT3{FT}, ·∂úspace),
        ·∂†temp_CT12 = Fields.Field(CT12{FT}, ·∂†space),
    )
    precomputed = (;
        ·∂úh_tot = Fields.Field(FT, ·∂úspace),
        ·∂†u¬≥ = Fields.Field(CA.CT3{FT}, ·∂†space),
        ·∂úf¬≥,
        ·∂†f¬π¬≤,
        ·∂úp = Fields.Field(FT, ·∂úspace),
        ·∂úK = Fields.Field(FT, ·∂úspace),
        ·∂úts = Fields.Field(TD.PhaseDry{FT}, ·∂úspace),
        ·∂†u = Fields.Field(C123{FT}, ·∂†space),
        ·∂úu = Fields.Field(C123{FT}, ·∂úspace),
    )
    dt = FT(0.1)

    ghost_buffer =
        !CA.do_dss(axes(Y.c)) ? (;) :
        (; c = Spaces.create_dss_buffer(Y.c), f = Spaces.create_dss_buffer(Y.f))

    CTh = CA.CTh_vector_type(axes(Y.c))
    p = (;
        rayleigh_sponge = CA.RayleighSponge{FT}(;
            zd = params.zd_rayleigh,
            Œ±_u‚Çï = params.alpha_rayleigh_uh,
            Œ±_w = params.alpha_rayleigh_w,
        ),
        params,
        ‚àÇ·∂úK_‚àÇ·∂úu‚Çï = Fields.Field(DiagonalMatrixRow{Adjoint{FT, CTh{FT}}}, ·∂úspace),
        ‚àÇ·∂úK_‚àÇ·∂†u‚ÇÉ = Fields.Field(BidiagonalMatrixRow{Adjoint{FT, CT3{FT}}}, ·∂úspace),
        ·∂úadvection_matrix = Fields.Field(
            BidiagonalMatrixRow{Adjoint{FT, C3{FT}}},
            ·∂úspace,
        ),
        ·∂útemp_scalar = Fields.Field(FT, ·∂úspace),
        ·∂†p_grad_matrix = Fields.Field(BidiagonalMatrixRow{C3{FT}}, ·∂†space),
        scratch,
        ghost_buffer,
        dt,
        precomputed,
    )
    ode_algo = CTS.IMEXAlgorithm(CTS.ARS343(), newtons_method)
    problem = SciMLBase.ODEProblem(func, Y, (FT(0), FT(1)), p)
    integrator = SciMLBase.init(problem, ode_algo; dt)
    Y‚Çú = similar(integrator.u);
# end

function main!(integrator, Y‚Çú, n)
    for _ in 1:n
        # @time SciMLBase.step!(integrator)
        @time implicit_tendency!(Y‚Çú, integrator.u, integrator.p, integrator.t)
    end
    return nothing
end
using Test
if ClimaComms.device() isa ClimaComms.CUDADevice
    Y‚Çú_bc = similar(Y‚Çú);
    @. Y‚Çú_bc = 0
    @. Y‚Çú = 0
    Yc = integrator.u.c;
    Yf = integrator.u.f;
    fill!(parent(Yc.œÅ), 1);
    zc = Fields.coordinate_field(Yc).z;
    zf = Fields.coordinate_field(Yf).z;
    @. Yc.œÅ += 0.1*sin(zc);
    parent(Yf.u‚ÇÉ) .+= 0.001 .* sin.(parent(zf));
    fill!(parent(Yc.u‚Çï), 0.01);
    fill!(parent(Yc.œÅe_tot), 100000.0);

    implicit_tendency!(Y‚Çú, integrator.u, integrator.p, integrator.t)
    implicit_tendency_bc!(Y‚Çú_bc, integrator.u, integrator.p, integrator.t)
    abs_err_c = maximum(Array(abs.(parent(Y‚Çú.c) .- parent(Y‚Çú_bc.c))))
    abs_err_f = maximum(Array(abs.(parent(Y‚Çú.f) .- parent(Y‚Çú_bc.f))))
    results_match = abs_err_c < 6e-9 && abs_err_c < 6e-9
    if !results_match
        @show norm(Array(parent(Y‚Çú_bc.c))), norm(Array(parent(Y‚Çú.c)))
        @show norm(Array(parent(Y‚Çú_bc.f))), norm(Array(parent(Y‚Çú.f)))
        @show abs_err_c
        @show abs_err_f
    end
    @test results_match
    println(CUDA.@profile trace=true begin
        # SciMLBase.step!(integrator)
        implicit_tendency!(Y‚Çú, integrator.u, integrator.p, integrator.t)
        implicit_tendency!(Y‚Çú, integrator.u, integrator.p, integrator.t)
        implicit_tendency!(Y‚Çú, integrator.u, integrator.p, integrator.t)
        implicit_tendency!(Y‚Çú, integrator.u, integrator.p, integrator.t)
    end)
    println(CUDA.@profile begin
        # SciMLBase.step!(integrator)
        @. Y‚Çú += 1
        @. Y‚Çú += 1
        @. Y‚Çú += 1
        @. Y‚Çú += 1
    end)
else
    @info "Compiling main loop"
    @time main!(integrator, Y‚Çú, 1)
    @info "Running main loop"
    @time main!(integrator, Y‚Çú, 3)
end


nothing
