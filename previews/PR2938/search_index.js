var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"J. M. Alexander and T. J. Dunkerton. A spectral parameterization of mean-flow forcing due to breaking gravity waves. Journal of the Atmospheric Sciences 56, 4167–4182 (1999).\n\n\n\nR. S. Lindzen. Turbulence and stress owing to gravity wave and tidal breakdown. Journal of Geophysical Research: Oceans 86, 9707–9714 (1981).\n\n\n\nS. T. Garner. A Topographic Drag Closure Built on an Analytical Base Flux. Journal of the Atmospheric Sciences 62, 2302–2315 (2005).\n\n\n\nP. A. O’Gorman and T. Schneider. The Hydrological Cycle over a Wide Range of Climates Simulated with an Idealized GCM. Journal of Climate 21, 3815–3832 (2008).\n\n\n\nand W. Yi. A new parameterization of spectral and broadband ocean surface albedo. Opt. Express 19, 26429–26443 (2011).\n\n\n\nT. J. Warren, N. E. Bowles, K. Donaldson Hanna and J. L. Bandfield. Modeling the angular dependence of emissivity of randomly rough surfaces. Journal of Geophysical Research: Planets 124, 585–601 (2019).\n\n\n\nF. T. Nieuwstadt, P. J. Mason, C.-H. Moeng and U. Schumann. Large-eddy simulation of the convective boundary layer: A comparison of four computer codes. In: Turbulent shear flows 8 (Springer, 1993); pp. 343–367.\n\n\n\nB. Kosović and J. A. Curry. A large eddy simulation study of a quasi-steady, stably stratified atmospheric boundary layer. J. Atmos. Sci. 57, 1052–1068 (2000).\n\n\n\nM. F. Khairoutdinov, S. K. Krueger, C.-H. Moeng, P. A. Bogenschutz and D. A. Randall. Large-eddy simulation of maritime deep tropical convection. Journal of Advances in Modeling Earth Systems 1 (2009).\n\n\n\nA. Brown, R. Cederwall, A. Chlond, P. Duynkerke, J.-C. Golaz, M. Khairoutdinov, D. Lewellen, A. Lock, M. MacVean, C.-H. Moeng and others. Large-eddy simulation of the diurnal cycle of shallow cumulus convection over land. Quarterly Journal of the Royal Meteorological Society: A journal of the atmospheric sciences, applied meteorology and physical oceanography 128, 1075–1093 (2002).\n\n\n\nB. Stevens, C.-H. Moeng, A. S. Ackerman, C. S. Bretherton, A. Chlond, S. de Roode, J. Edwards, J.-C. Golaz, H. Jiang, M. Khairoutdinov and others. Evaluation of large-eddy simulations via observations of nocturnal marine stratocumulus. Monthly weather review 133, 1443–1462 (2005).\n\n\n\nA. S. Ackerman, M. C. vanZanten, B. Stevens, V. Savic-Jovcic, C. S. Bretherton, A. Chlond, J.-C. Golaz, H. Jiang, M. Khairoutdinov, S. K. Krueger, D. C. Lewellen, A. Lock, C.-H. Moeng, K. Nakamura, M. D. Petters, J. R. Snider, S. Weinbrecht and M. Zulauf. Large-Eddy Simulations of a Drizzling, Stratocumulus-Topped Marine Boundary Layer. Monthly Weather Review 137, 1083–1110 (2009).\n\n\n\nR. M. Rauber, B. Stevens, H. T. Ochs, C. Knight, B. A. Albrecht, A. M. Blyth, C. W. Fairall, J. B. Jensen, S. G. Lasher-Trapp, O. L. Mayol-Bracero, G. Vali, J. R. Anderson, B. A. Baker, A. R. Bandy, E. Burnet, J.-L. Brenguier, W. A. Brewer, P. R. Brown, R. Chuang, W. R. Cotton, L. D. Girolamo, B. Geerts, H. Gerber, S. Göke, L. Gomes, B. G. Heikes, J. G. Hudson, P. Kollias, R. R. Lawson, S. K. Krueger, D. H. Lenschow, L. Nuijens, D. W. O'Sullivan, R. A. Rilling, D. C. Rogers, A. P. Siebesma, E. Snodgrass, J. L. Stith, D. C. Thornton, S. Tucker, C. H. Twohy and P. Zuidema. Rain in Shallow Cumulus Over the Ocean: The RICO Campaign. Bulletin of the American Meteorological Society 88, 1912–1928 (2007).\n\n\n\nW. Grabowski, P. Bechtold, A. Cheng, R. Forbes, C. Halliwell, M. Khairoutdinov, S. Lang, T. Nasuno, J. Petch, W.-K. Tao and others. Daytime convective development over land: A model intercomparison based on LBA observations. Quarterly Journal of the Royal Meteorological Society: A journal of the atmospheric sciences, applied meteorology and physical oceanography 132, 317–344 (2006).\n\n\n\nZ. Tan, C. M. Kaul, K. G. Pressel, Y. Cohen, T. Schneider and J. Teixeira. An extended eddy-diffusivity mass-flux scheme for unified representation of subgrid-scale turbulence and convection. Journal of Advances in Modeling Earth Systems 10, 770–800 (2018).\n\n\n\nJ. Z. HOLLAND and E. M. RASMUSSON. Measurements of the Atmospheric Mass, Energy, and Momentum Budgets Over a 500-Kilometer Square of Tropical Ocean. Monthly Weather Review 101, 44–55 (1973).\n\n\n\nP. Soares, P. Miranda, A. Siebesma and J. Teixeira. An eddy-diffusivity/mass-flux parametrization for dry and shallow cumulus convection. Quarterly Journal of the Royal Meteorological Society: A journal of the atmospheric sciences, applied meteorology and physical oceanography 130, 3365–3383 (2004).\n\n\n\n","category":"page"},{"location":"edmf_equations/#Sub-grid-scale-equations","page":"EDMF Equations","title":"Sub-grid scale equations","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This describes the EDMF scheme equations and its discretizations. Where possible, we use a coordinate invariant form: the ClimaCore operators generally handle the conversions between bases internally.","category":"page"},{"location":"edmf_equations/#Dycore-variables","page":"EDMF Equations","title":"Dycore variables","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"boldsymbolOmega is the planetary angular velocity. We currently use a shallow-atmosphere approximation, with\nboldsymbolOmega = Omega sin(phi) boldsymbole^v\nwhere phi is latitude, and Omega is the planetary rotation rate in rads/sec (for Earth, 729212 times 10^-5 s^-1) and boldsymbole^v is the unit radial basis vector. This implies that the horizontal contravariant component boldsymbolOmega^h is zero.\nboldsymbolu_h = u_1 boldsymbole^1 + u_2 boldsymbole^2 is the projection onto horizontal covariant components (covariance here means with respect to the reference element), stored at cell centers.\nPhi = g z is the geopotential, where g is the gravitational acceleration rate and z is altitude above the mean sea level.\nrho_textref is the reference state density\np is air pressure, derived from the thermodynamic state, reconstructed at cell centers.\np_textref is the reference state pressure. It is related to the reference state density by analytical hydrostatic balance: nabla p_textref = - rho_textref nabla Phi.","category":"page"},{"location":"edmf_equations/#Prognostic-variables","page":"EDMF Equations","title":"Prognostic variables","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"hatrho^j: effective density in kg/m³. Superscript j represents the sub-domain. hatrho^j = rho^j a^j where rho^j is the sub-domain density and a^j is the sub-domain area fraction. This is discretized at cell centers.\nboldsymbolu^j velocity, a vector in m/s. This is discretized via boldsymbolu^j = boldsymbolu_h + boldsymbolu_v^j where\nboldsymbolu_v^j = u_3^j boldsymbole^3 is the projection onto the vertical covariant components, stored at cell faces.\nhatrho^j e^j: total energy in J/m³. This is discretized at cell centers.\nhatrho^j q^j: moisture tracers. q^j stands for the sub-domain total (liquid, ice, rain, snow) specific humidity in kg/kg. This is stored at cell centers.\nhatrho^j chi^j: other tracers (aerosol, ...), again stored at cell centers.","category":"page"},{"location":"edmf_equations/#Operators","page":"EDMF Equations","title":"Operators","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"We make use of the following operators","category":"page"},{"location":"edmf_equations/#Reconstruction","page":"EDMF Equations","title":"Reconstruction","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"I^c is the face-to-center reconstruction operator (arithmetic mean)\nI^f is the center-to-face reconstruction operator (arithmetic mean)\nWI^f is the center-to-face weighted reconstruction operator\nWI^f(J x) = I^f(J*x)  I^f(J), where J is the value of the Jacobian for use in the weighted interpolation operator\nU^f is the 1st or 3rd-order center-to-face upwind product operator # fix link","category":"page"},{"location":"edmf_equations/#Differential-operators","page":"EDMF Equations","title":"Differential operators","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"D_h is the discrete horizontal spectral divergence.\nhatmathcalD_h is the discrete horizontal spectral weak divergence.\nD^c_v is the face-to-center vertical divergence.\nG_h is the discrete horizontal spectral gradient.\nG^f_v is the center-to-face vertical gradient.\nthe gradient is set to 0 at the top and bottom boundaries.\nC_h is the curl components involving horizontal derivatives\nC_hboldsymbolu_h returns a vector with only vertical contravariant components.\nC_hboldsymbolu_v returns a vector with only horizontal contravariant components.\nhatmathcalC_h is the weak curl components involving horizontal derivatives\nC^f_v is the center-to-face curl involving vertical derivatives.\nC^f_vboldsymbolu_h returns a vector with only a horizontal contravariant component.\nthe curl is set to 0 at the top and bottom boundaries.\nWe need to clarify how best to handle this.","category":"page"},{"location":"edmf_equations/#Projection","page":"EDMF Equations","title":"Projection","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"mathcalP is the direct stiffness summation (DSS) operation, which computes the projection onto the continuous spectral element basis.","category":"page"},{"location":"edmf_equations/#Auxiliary-and-derived-quantities","page":"EDMF Equations","title":"Auxiliary and derived quantities","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"tildeboldsymbolu^j is the mass-weighted reconstruction of velocity at the interfaces: by interpolation of contravariant components\ntildeboldsymbolu^j = WI^f left( rho^j J boldsymbolu_h right) + boldsymbolu_v^j","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"Technically, from mass conservation, the weighting factor should be hatrho^j J. However, in order to avoid issues coming from close to zero sub-domain area fractions, we can instead use rho^j J or even rho J.","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"barboldsymbolu^j is the reconstruction of velocity at cell-centers, carried out by linear interpolation of the covariant vertical component:\nbarboldsymbolu^j = boldsymbolu_h + I_c(boldsymbolu_v^j)\nboldsymbolb^j is the reduced gravitational acceleration\nboldsymbolb^j = - fracrho^j - rho_textrefrho^j nabla Phi\nK^j = tfrac12 boldsymbolu^j^2 is the specific kinetic energy (J/kg), reconstructed at cell centers by\nK^j = tfrac12 left(boldsymbolu_h^j cdot boldsymbolu_h^j + 2 boldsymbolu_h^j cdot I_c (boldsymbolu_v^j) + I_c(boldsymbolu_v^j cdot boldsymbolu_v^j) right)\nwhere boldsymbolu_h^j is defined on cell-centers, boldsymbolu_v^j is defined on cell-faces, and I_c (boldsymbolu_v) is interpolated using covariant components.\nnu_u, nu_h, and nu_chi are hyperdiffusion coefficients, and c is the divergence damping factor.\nNo-flux boundary conditions are enforced by requiring the third contravariant component of the face-valued velocity at the boundary, boldsymboltildeu^vj, to be zero. The vertical covariant velocity component is computed as\ntildeu_v^j = - fracu_1g^31 + u_2g^32g^33","category":"page"},{"location":"edmf_equations/#Equations-and-discretizations","page":"EDMF Equations","title":"Equations and discretizations","text":"","category":"section"},{"location":"edmf_equations/#Mass","page":"EDMF Equations","title":"Mass","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"Follows the continuity equation","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j = - nabla cdot (hatrho^j boldsymbolu^j)  + RHS","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This is discretized using the following","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j\n= - D_h left hatrho^j (boldsymbolu_h + I^c(boldsymbolu_v^j)) right - D^c_v leftWI^f( J hatrho^j) tildeboldsymbolu^j right + RHS","category":"page"},{"location":"edmf_equations/#Momentum","page":"EDMF Equations","title":"Momentum","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"Uses the advective form equation","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t boldsymbolu^j  = - (2 boldsymbolOmega + nabla times boldsymbolu^j) times boldsymbolu^j - frac1rho^j nabla (p - p_textref)  + boldsymbolb^j - nabla K^j + RHS","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"By breaking the curl and cross product terms into horizontal and vertical contributions, and removing zero terms (e.g. nabla_v  times boldsymbolu_v = 0), we obtain the vertical momentum equation. The horizontal momentum equation is only solved in the grid-mean.","category":"page"},{"location":"edmf_equations/#Vertical-momentum","page":"EDMF Equations","title":"Vertical momentum","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t boldsymbolu_v^j  =\n  - (nabla_v times boldsymbolu_h + nabla_h times boldsymbolu_v^j) times boldsymbolu^h\n  - frac1rho^j nabla_v (p - p_textref) - fracrho^j - rho_textrefrho^j nabla_v Phi - nabla_v K^j + RHS ","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This is stabilized with the addition of 4th-order vector hyperviscosity","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"-nu_u nabla_h^2(nabla_h^2(boldsymbolu^j))","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"projected onto the third contravariant direction.","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"The (nabla_v times boldsymbolu_h + nabla_h times boldsymbolu_v^j) times boldsymbolu^h term is discretized as","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"(C^f_vboldsymbolu_h + C_hboldsymbolu_v^j) times I^f(boldsymbolu^h) ","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"and the -frac1rho^j nabla_v (p - p_textref) - fracrho^j - rho_textrefrho^j nabla_v Phi - nabla_v K^j terms as","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"-frac1I^f(rho^j) G^f_vp - p_textref - fracI^f(rho^j - rho_textref)I^f(rho^j) G^f_vPhi - G^f_vK^j ","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"The hyperviscosity term is","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"- nu_u hatmathcalD_h (mathcalG_h (psi) )","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"where","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"psi = mathcalP left hatmathcalD_h left( mathcalG_h (w^j)right) right","category":"page"},{"location":"edmf_equations/#Total-energy","page":"EDMF Equations","title":"Total energy","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j e^j = - nabla cdot((hatrho^j e^j + frachatrho^jrho^jp) boldsymbolu^j) - fracprho fracpartialpartial t hatrho^j + RHS","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"which is stabilized with the addition of a 4th-order hyperdiffusion term on total enthalpy:","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"- nu_h nabla cdot left( hatrho^j nabla^3 left(fracrho^j e^j + prho^j right)right)","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"The equation is discretized as","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j e^j approx\n- D_h left \n    left( hatrho^j e^j + frachatrho^jrho^jp right) \n    left( boldsymbolu_h + I^c(boldsymbolu_v^j) right)\n  right\n- D^c_v left \n    WI^f(Jhatrho^j)   tildeboldsymbolu^j  I^f left(frachatrho^j e^j + frachatrho^jrho^jphatrho^j right)\n  right \n  - fracprho fracpartialpartial t hatrho^j - nu_h hatmathcalD_h( rho mathcalG_h(psi^j) ) + RHS ","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"where","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"psi^j = mathcalP left hatmathcalD_h left( mathcalG_h left(fracrho^j e^j + prho^j right)right) right","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"todo: Todo\nNeed to change this to first order upwinding.","category":"page"},{"location":"edmf_equations/#Moisture-tracers","page":"EDMF Equations","title":"Moisture tracers","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"For a sub-domain moisture scalar q^j, the density-weighted scalar hatrho^j q^j obeys the conservation law","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j q^j = - nabla cdot(hatrho^j q^j (boldsymbolu^j - w_q^j hatboldsymbolk)) + RHS ","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"where hatboldsymbolk is the vertical unit vector and w_q^j is the terminal velocity.","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This is stabilized with the addition of a 4th-order hyperdiffusion term","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"- nu_q nabla cdot(hatrho^j nabla^3(q^j))","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This is discretized using the following","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j q^j approx\n- D_h hatrho^j q^j (boldsymbolu_h + I^c(boldsymbolu_v^j))\n- D^c_v left WI^f(Jhatrho^j)  U^fleft( tildeboldsymbolu^j  frachatrho^j q^jhatrho^j right) right\n- nu_chi hatmathcalD_h ( hatrho^j  mathcalG_h (psi^j) ) + sedimentation + RHS","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"where","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"psi^j = mathcalP left hatmathcalD_h left( mathcalG_h left( frachatrho^j q^jhatrho^j right)right) right","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"Currently we use the central reconstruction","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"- D^c_v left WI^f(Jhatrho^j)  tildeboldsymbolu^j  I^fleft( frachatrho^j q^jhatrho^j right) right","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"todo: Todo\nNeed to change this to first order upwinding.","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"todo: Todo\nWrite down the discretization for sedimentation. Assume the sedimentation velocity is zero for now.","category":"page"},{"location":"edmf_equations/#Other-tracers","page":"EDMF Equations","title":"Other tracers","text":"","category":"section"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"For a sub-domain scalar chi^j, the density-weighted scalar hatrho^j chi^j follows the continuity equation","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j chi^j = - nabla cdot(hatrho^j chi^j boldsymbolu^j) + RHS ","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This is stabilized with the addition of a 4th-order hyperdiffusion term","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"- nu_chi nabla cdot(hatrho^j nabla^3(chi^j))","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"This is discretized using the following","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"fracpartialpartial t hatrho^j chi^j approx\n- D_h hatrho^j chi^j (boldsymbolu_h + I^c(boldsymbolu_v^j))\n- D^c_v left WI^f(Jhatrho^j)  U^fleft( tildeboldsymbolu^j  frachatrho^j chi^jhatrho^j right) right\n- nu_chi hatmathcalD_h ( hatrho^j  mathcalG_h (psi^j) ) + RHS","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"where","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"psi^j = mathcalP left hatmathcalD_h left( mathcalG_h left( frachatrho^j chi^jhatrho^j right)right) right","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"Currently we use the central reconstruction","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"- D^c_v left WI^f(Jhatrho^j)  tildeboldsymbolu^j  I^fleft( frachatrho^j chi^jhatrho^j right) right","category":"page"},{"location":"edmf_equations/","page":"EDMF Equations","title":"EDMF Equations","text":"todo: Todo\nNeed to change this to first order upwinding.","category":"page"},{"location":"gravity_wave/#Gravity-wave-parameterization","page":"Gravity Wave Drag Parameterizations","title":"Gravity wave parameterization","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Gravity waves have a great impact on the atmospheric circulation. They are usually generated from topography or convection, propagate upward and alter temperature and winds in the middle atmosphere, and influence tropospheric circulation through downward control. The horizontal wavelength for gravity waves ranges from several kilometers to hundreds of kilometers, which is smaller than typical GCM resolution and needs to be parameterized.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The gravity wave drag on the wind velocities (overlinevecv=(uv)) are ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"fracpartial overlinevecv partial t =  - underbracefracpartial overlinevecvwpartial zBig_GW _vecX ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"with vecX = (X_lambda X_phi) representing the sub-grid scale zonal and meridional components of the gravity wave drag and is calculated with the parameterization. ","category":"page"},{"location":"gravity_wave/#Non-orographic-gravity-wave","page":"Gravity Wave Drag Parameterizations","title":"Non-orographic gravity wave","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The non-orographic gravity wave drag parameterization follows the spectra methods described in [1]. The following assumptions are made for this parameterization to work:","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The wave spectrum consists of independent monochromatic waves, and wave-wave interaction is neglected when propagation and instability is computed.\nThe gravity wave propagates vertically and conservatively to the breaking level and deposits all momentum flux into that level, as opposed to the method using saturation profile described in [2].\nThe wave breaking criterion is derived in a hydrostatic, non-rotating frame. Including non-hydrostatic and rotation is proved to have negligible impacts.\nThe gravity wave is intermittent and the intermittency is computed as the ratio of the total long-term average source to the integral of the source momentum flux spectrum.","category":"page"},{"location":"gravity_wave/#Spectrum-of-the-momentum-flux-sources","page":"Gravity Wave Drag Parameterizations","title":"Spectrum of the momentum flux sources","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The source spectrum with respect to phase speed is prescribed in Eq. (17) in [1]. We adapt the equation so that the spectrum writes as a combination of a wide and a narrow band as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"B_0(c) = fracF_S0(c)rho_0 = sgn(c-u_0) left( Bm_w expleft -left( fracc-c_0c_w_w right) ln2 right + Bm_n expleft -left( fracc-c_0c_w_n right) ln2 right right)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where the subscript 0 denotes values at the source level. c_0 is the phase speed with the maximum flux magnitude Bm. c_w is the half-width at half-maximum of the Gaussian.  _w and _n represent the wide and narrow bands of the spectra.","category":"page"},{"location":"gravity_wave/#Upward-propagation-and-wave-breaking","page":"Gravity Wave Drag Parameterizations","title":"Upward propagation and wave breaking","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Waves that are reflected will be removed from the spectrum. A wave that breaks at a level above the source will deposit all its momentum flux into that level and be removed from the spectrum.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The reflection frequency is defined as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"omega_r(z) = (fracN(z)^2 k^2k^2+alpha^2)^12","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where N(z) is the buoyancy frequency, k is the horizontal wavenumber that corresponds to a wavelength of 300 km, alpha = 1H where H is the scale height. omega_r(z) is used to determine for each monochromatic wave in the spectrum, whether it will be reflected at height z.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The instability condition is defined as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Q(zc) = fracrho_0rho(z) frac2N(z)B_0(c)kc-u(z)^3","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Q(zc) is used to determine whether the monochromatic wave of phase speed c gets unstable at height z. ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"At the source level\nif omega=kc-u_0 geq omega_r, this wave would have undergone internal reflection somewhere below and is removed from the spectrum;\nif Q(z_0 c) geq 1, it is also removed because it is not stable at the source level.\nAt the levels above (z_nz_0), omega(z_n)=kc-u(z_n) geq omega_r(z_n) is removed from the spectrum. In the remaining speed, Q(z_nc) geq 1 are breaking between level z_n-1 and z_n, and this portion of momentum flux is all deposited between z_n-1 and z_n, which yields\nX(z_n-12) = fracepsilon rho_0rho(z_n-12)Sigma_j (B_0)j\nwhere epsilon=F_S0rho_0Sigma B_0 is the wave intermittency. In computing the intermittency, F_S0 is the time average total momentum flux and is prescribed as latitude dependent properties.  And we get \nX(z_n-1) = 05*leftX(z_n-32) +X(z_n-12) right","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"By applying the above parameterization on zonal and meridional winds, the forcing for the physical wind velocity is computed. We further transform them onto the Covariant vectors and that will be the tendencied added onto the momentum equation.","category":"page"},{"location":"gravity_wave/#Orographic-gravity-wave","page":"Gravity Wave Drag Parameterizations","title":"Orographic gravity wave","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The orographic gravity wave drag parameterization follows the methods described in [3]. The momentum drag from sub-grid scale mountains is divided into a non-propagating component and a propagating component. The non-propagating component forces momentum drag within the planetary boundary layer while the propagating component generate a c=0 gravity wave which propagates upwards and deposit momentum flux to the layers where it breaks.","category":"page"},{"location":"gravity_wave/#PBL-top","page":"Gravity Wave Drag Parameterizations","title":"PBL top","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"There are many ways to determine the PBL top. We implement the following simple criteria to find the PBL top level k as the highest level that satisfies","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c pk ge 05  ^f p0","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c T0 + T_boost - ^c Tk  gc_p * ( ^c zk - ^c z0 )","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where the superscripts f and c represent cell faces and cell centers in the vertical stencils. T_boost = 15 mathrmK is the surface temperature boost to improve PBL height estimate.","category":"page"},{"location":"gravity_wave/#Orographic-information","page":"Gravity Wave Drag Parameterizations","title":"Orographic information","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The orographic information needed in generating the base momentum flux for low-level flow encountering the sub-grid scale mountains. We compute the tensor textbfT and the scalar h_max from the Earth elevation data (GFDL codes here).","category":"page"},{"location":"gravity_wave/#Tensor-\\textbf{T}","page":"Gravity Wave Drag Parameterizations","title":"Tensor textbfT","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The tensor textbfT, which contains all relevant information including amplitude, variance, orientation, and anisotropy about topography, is computed as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"textbfT = nabla chi (nabla h)^T","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where h is the earth elevation, and chi = - fracrho N2pi frach(x)x-x int int dx dy is the velocity potential.","category":"page"},{"location":"gravity_wave/#h_max","page":"Gravity Wave Drag Parameterizations","title":"h_max","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"h_max represents the relation between the local elevation with its surroundings. It is computed as the 4th moments of the local elevation with a certain area.","category":"page"},{"location":"gravity_wave/#Base-flux","page":"Gravity Wave Drag Parameterizations","title":"Base flux","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The base momentum flux generated is computed and divided into the propagating and non-propagating components.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Let overlinecdot represents the mean property of the low-level flow which can be obtained as either the average within PBL or the value at the first cell center right above PBL top. Let overlineV = (overlineu overlinev), overlineN, and overlinerho represent the horizontal wind, buoyancy frequency, and density of the low-level flow. overlineN is computed as ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"overlineN ^2 = fracgoverlineT * left( overlinefracdTdz + fracgc_p right)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The base flux is computed as the linear drag following","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau = overlinerho overlineN langle textbfT rangle ^T overlineV","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where langle textbfT rangle = t_11 t_12 t_21 t_22 is the tensor that contains orographic information. In the code, we compute the zonal and meridional components separately as ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_x = overlinerho overlineN (t_11 overlineu + t_21 overlinev)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_y = overlinerho overlineN (t_12 overlineu + t_22 overlinev)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The base flux is then corrected using Froude number and saturation velocity. Let","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"V_tau = max(epsilon_0 - overlineV cdot fractautau)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and given the orographic information h_max and h_min, the max and min Froude numbers are computed as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Fr_max = h_max fracoverlineNV_tau","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Fr_min = h_min fracoverlineNV_tau","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"We also compute the med Froude number as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Fr_med = Fr_crit + Fr_int","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where Fr_crit = 07 is the critical Froude number for nonlinear flow, Fr_int = 05 is an arbitrary parameter.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The saturation velocity is computed as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"U_sat = sqrtfracoverlinerhorho_0 fracV_pmbtau^3overlineN L_0","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where rho_0 = 12 mathrmkgm^3 is the arbitrary density scale, and L_0 = 80e3 mathrmm is the arbitrary horizontal length scale. ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The following set of intermediate variables (FrU's) are computed to correct the linear base flux:","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_sat = Fr_crit * U_sat","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_min = Fr_min * U_sat","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_med = Fr_med * U_sat","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_max = max(Fr_max * U_sat FrU_min + epsilon_0)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_clp = min(FrU_max max(FrU_min FrU_sat))","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_0 = fracU_0V_tauU_sat","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and U_0=10 mathrmms is the arbitrary velocity scale.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Now the correct linear drag is computed as ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_l = fracFrU_max^2+gamma-epsilon - FrU_min^2+gamma-epsilon2+gamma-epsilon","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and the propagating and non-propagating parts of the drag are computed as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_p = a_0 left fracFrU_clp^2+gamma-epsilon - FrU_min^2+gamma-epsilon2+gamma-epsilon + FrU_sat^beta+2 fracFrU_max^gamma-epsilon-beta - FrU_clp^gamma-epsilon-betagamma-epsilon-beta right","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_np = a_1 fracU_sat1+beta left fracFrU_max^1+gamma-epsilon - FrU_clp^1+gamma-epsilon1+gamma-epsilon - FrU_sat^beta+1 fracFrU_max^gamma-epsilon-beta - FrU_clp^gamma-epsilon-betagamma-epsilon-beta right","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Here, (gamma epsilon beta) = (04 00 05) are arbitrary parameters that describe the mountain shapes.","category":"page"},{"location":"gravity_wave/#Saturation-profiles-for-the-propagating-component","page":"Gravity Wave Drag Parameterizations","title":"Saturation profiles for the propagating component","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The vertical profiles of saturated momentum flux tau_sat is computed then so that momentum forcing can be obtained for doverlineVdt = -overlinerho^-1dtau_satdz. This only applies to the propagating part.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Similar to the base flux calculation but for the 3D fields, we computed N and V_tau at cell faces as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^f Nk^2 = fracg^f Tk * ( ^f overlinefracdTdzk + fracgcp)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^f V_tauk = max(epsilon_0 - Vk cdot fractautau)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Let L_1 = L_0 * max(05 min(20 10-samp*V_tau*d^2V_tauN^2)) where samp=10 is the correction for coarse sampling of d^2Vdz^2, and","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^f d^2V_tauk = - fracd^2 Vdz^2k cdot fractautau","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The saturated velocity U_sat is refined as follows and used to computed the intermediate FrUs","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"U_sat = min(U_sat sqrtfrac^mathrmf rhorho_0 frac^mathrmf V_pmbtau^3^mathrmfN L_1 )","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The FrU_min and FrU_max are inherited from the base flux calculation. Let's save the source level FrU_sat and FrU_clp into","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_sat0 = FrU_sat","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_clp0 = FrU_clp","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and update FrU_sat and FrU_clp as ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_sat = Fr_crit * U_sat","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"FrU_clp = min(FrU_max max(FrU_min FrU_sat))","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Then, the saturated profile of propagating component of the momentum flux is ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_sat = a_0 left fracFrU_clp^2+gamma-epsilon - FrU_min^2+gamma-epsilon2+gamma-epsilon + FrU_sat^2 FrU_sat0^beta fracFrU_max^gamma-epsilon-beta - FrU_clp0^gamma-epsilon-betagamma-epsilon-beta + FrU_sat^2 fracFrU_clp0^gamma-epsilon - FrU_clp^gamma-epsilongamma-epsilon right","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"If the wave does not break and propagates all the way up to the model top, the residual momentum carried by this part will be redistributed throughout the column weighted by pressure to conserve momentum. That is,","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"tau_satk = tau_satk - tau_satend frac^f p1-^f pk^f p1-^f pend","category":"page"},{"location":"gravity_wave/#Velocity-tendencies-due-to-the-orographic-drag","page":"Gravity Wave Drag Parameterizations","title":"Velocity tendencies due to the orographic drag","text":"","category":"section"},{"location":"gravity_wave/#Propagating-component","page":"Gravity Wave Drag Parameterizations","title":"Propagating component","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The forcing from the propagating part on the zonal and meridional wind are","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdudt right) _p = - frac1^c rho fractau_xtau_l fracdtau_satdz","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdvdt right) _p = - frac1^c rho fractau_ytau_l fracdtau_satdz","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Here, (tau_x tau_y tau_l) is computed in the base flux calculation, and tau_sat is calculated in the saturation flux profile. The propagating part functions throughout the entire column.","category":"page"},{"location":"gravity_wave/#Non-propagating-component","page":"Gravity Wave Drag Parameterizations","title":"Non-propagating component","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Let's first find the reference level kref below which the non-propagating part functions to decelerate the flow. Let k loops from PBL top upwards, initiate phase = 00 and z_last = ^fzk, if phase leq pi and k is below the top level, update phase and z_last as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"phase += fracmax(N_min min(N_max ^fNk))max(vvmin ^f V_tauk) * (^c zk+1 - z_last)","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"z_last = ^c zk+1","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and move one level up. Here, N_min = 07e-2 N_max=17e-2 vvmin = 10; and (^f N ^f V_tau) are computed during the saturation profile calculation. Let kref=k when the loop terminates.","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"The drag forcing due to non-propagating component functions from the PBL top to the level of kref and is weighted by pressure. The weights of each level are computed as","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"weightk = ^c pk - ^f pkref","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"and the sum of the weights is ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"wtsum += frac^f pk-1 - ^f pkweightk","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"For level k between PBL top and kref, the forcing due to non-propagating component is","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdudt k right)_np = g fractau_nptau_l fracweightkwtsum tau_x ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdvdt k right)_np = g fractau_nptau_l fracweightkwtsum tau_y ","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"where (tau_x tau_y tau_l tau_np) is computed in the base flux calculation.","category":"page"},{"location":"gravity_wave/#Constrain-the-forcings","page":"Gravity Wave Drag Parameterizations","title":"Constrain the forcings","text":"","category":"section"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Total drag from both components are","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdudt k right)_tau = ^c left( fracdudt k right)_p + ^c left( fracdudt k right)_np","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdvdt k right)_tau = ^c left( fracdvdt k right)_p + ^c left( fracdvdt k right)_np","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"To avoid instability due to large tendencies from the forcing, let's constrain the forcing magnitude with epsilon_V = 3e-3, and let","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdudt k right)_tau = max(-epsilon_V min(epsilon_V ^c left( fracdudt k right)_pmbtau))","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"^c left( fracdvdt k right)_tau = max(-epsilon_V min(epsilon_V ^c left( fracdvdt k right)_pmbtau))","category":"page"},{"location":"gravity_wave/","page":"Gravity Wave Drag Parameterizations","title":"Gravity Wave Drag Parameterizations","text":"Here we computed the forcing on the physical velocity (i.e., zonal and meridional wind). They are converted to the Covariant12Vector before being added to Y_t in the codes.","category":"page"},{"location":"parameters/#Overview","page":"Parameters","title":"Overview","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameters in ClimaAtmos.jl are handled by ClimaParams.jl. The repository stores all default values of parameters used in ClimaAtmos and has various utilities for handling parameters. It allows for easy parameter overriding without needing to change the source code directly. For more information, see the docs.","category":"page"},{"location":"parameters/#How-to-add-your-own-parameters-to-ClimaAtmos:","page":"Parameters","title":"How to add your own parameters to ClimaAtmos:","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"First, create a TOML file with the parameters you want to add/override. Here is the basic format for a single parameter:","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"[descriptive name]\nvalue = <value>\ntype = \"<type>\"","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The possible types are: bool, float, integer, or string.","category":"page"},{"location":"parameters/#Basic-example-for-gravitational-acceleration:","page":"Parameters","title":"Basic example for gravitational acceleration:","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"[gravitational_acceleration]\nvalue = 9.81\ntype = \"float\"","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"For more info on formatting the TOML, see here.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Once you have created your parameter file (parameters.toml), you must create a separate YAML configuration file (config.yaml). In the config file, enter:","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"toml: parameters.toml","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"In order to run the model, type: julia --project=examples --config_file config.yaml. Note that the --config_file argument can take several config files, so if you have a separate config file you would like to use, you can simply add it to the end of the command line arguments. Alternatively, you can just add your TOML config to the existing config file.","category":"page"},{"location":"available_diagnostics/#Available-diagnostic-variables","page":"Available Diagnostics","title":"Available diagnostic variables","text":"","category":"section"},{"location":"available_diagnostics/","page":"Available Diagnostics","title":"Available Diagnostics","text":"Autogenerate table of available diagnostics:","category":"page"},{"location":"available_diagnostics/","page":"Available Diagnostics","title":"Available Diagnostics","text":"include(\"make_diagnostic_table.jl\")","category":"page"},{"location":"installation_instructions/#Installation-instructions","page":"Installation instructions","title":"Installation instructions","text":"","category":"section"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"ClimaAtmos.jl is a registered Julia package. To install","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"julia> using Pkg\n\njulia> Pkg.add(\"ClimaAtmos\")","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"Alternatively, you can clone the ClimaAtmos repository with:","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"$ git clone https://github.com/CliMA/ClimaAtmos.jl.git","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"Now change into the ClimaAtmos.jl directory with ","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"$ cd ClimaAtmos.jl","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"To use ClimaAtmos, you need to instantiate all dependencies with:","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"$ julia --project\njulia> ]\n(ClimaAtmos) pkg> instantiate","category":"page"},{"location":"config/#Creating-custom-configurations","page":"Configuration","title":"Creating custom configurations","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"To create a custom configuration, first make a .yml file. In the file, you can set configuration arguments as key: value pairs to override the default config. YAML parsing is fairly forgiving – values will generally be parsed to the correct type. The only exception is true/false strings. These need quotes around them, or they will be parsed to Bools.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"To start the model with a custom configuration, run: ","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"julia --project=examples examples/driver.jl --config_file <yaml>","category":"page"},{"location":"config/#Example","page":"Configuration","title":"Example","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"Below is the default Bomex configuration:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"job_id: \"prognostic_edmfx_bomex_box\"\ninitial_condition: \"Bomex\"\nsubsidence: \"Bomex\"\nedmf_coriolis: \"Bomex\"\nls_adv: \"Bomex\"\nsurface_setup: \"Bomex\"\nturbconv: \"prognostic_edmfx\"\nedmfx_upwinding: first_order\nedmfx_entr_model: \"Generalized\"\nedmfx_detr_model: \"Generalized\"\nedmfx_sgs_mass_flux: true\nedmfx_sgs_diffusive_flux: true\nedmfx_nh_pressure: true\nprognostic_tke: false\nmoist: \"equil\"\nconfig: \"box\"\nhyperdiff: \"true\"\nx_max: 1e8\ny_max: 1e8\nz_max: 3e3\nx_elem: 2\ny_elem: 2\nz_elem: 60\nz_stretch: false\nperturb_initstate: false\ndt: \"5secs\"\nt_end: \"6hours\"\ndt_save_state_to_disk: \"10mins\"\ntoml: [toml/prognostic_edmfx.toml]","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"To add a new configuration argument/key, open .buildkite/default_config.yml. Add an entry with the following format:","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"<argument_name>:\n    value: <argument_value>\n    help: <help string>","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"The help field is optional if you don't plan on making a permanent change to the configuration argument. If adding a configuration used in EDMF, add it to .buildkite/default_edmf_config.yml.","category":"page"},{"location":"config/","page":"Configuration","title":"Configuration","text":"See below for the full list of configuration arguments.","category":"page"},{"location":"config/#Default-Configuration","page":"Configuration","title":"Default Configuration","text":"","category":"section"},{"location":"config/","page":"Configuration","title":"Configuration","text":"include(\"config_table.jl\");","category":"page"},{"location":"longruns/#Buildkite-longrun-jobs","page":"Longruns","title":"Buildkite longrun jobs","text":"","category":"section"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"Here is a brief description of the buildkite longrun jobs.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_bw_rhoe_highres\n\nDry baroclinic wave. Test the dry dycore initial value problem.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_bw_rhoe_equil_highres\n\nMoist baroclinic wave. Test the moist dycore initial value problem.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_hs_rhoe_dry_55km_nz63\n\nDry Held Suarez. Test the dry dycore with an equilibrium state with sources and sinks.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_hs_rhoe_equil_55km_nz63_0M\n\nMoist Held Suarez. Test the moist dycore with an equilibrium state with sources and sinks.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_clearsky_0M\n\nAquaplanet with idealized insolation, clear-sky radiation, and 0-moment microphysics.\nUse this job to test new physical components.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_clearsky_diagedmf_0M\n\nAquaplanet with idealized insolation, clear-sky radiation, diagnostic edmf\nand 0-moment microphysics.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_allsky_diagedmf_0M\n\nAquaplanet with idealized insolation, all-sky radiation, diagnostic edmf\nand 0-moment microphysics.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_sphere_hydrostatic_balance_rhoe\n\nSolid body rotation. Test if the dry dycore can maintain the no flow steady state.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_zalesak_tracer_energy_bw_rhoe_equil_highres\n\nMoist baroclinic wave with limiter and flux-corrected transport (zalesak).","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_ssp_bw_rhoe_equil_highres\n\nMoist baroclinic wave with the SSP timestepper.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_gray_0M\n\nAquaplanet with idealized insolation, gray radiation, and 0-moment microphysics.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_clearsky_diagedmf_diffonly_0M\n\nAquaplanet with idealized insolation, clear-sky radiation, diagnostic edmf (diffusion only)\nand 0-moment microphysics.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_clearsky_tvinsol_0M_slabocean\n\nAquaplanet with slab ocean with time-varying insolation, clear-sky radiation,\nand 0-moment microphysics.\nTest if the coupled system conserves energy and water.\nTest if the time-varying insolation yields reasonable results.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_rhoe_equil_55km_nz63_clearsky_0M_earth\n\nAquaplanet with idealized insolation, clear-sky radiation, 0-moment microphysics, and\nEarth topography. Use this job to test topography related features.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_clearsky_1M\n\nAquaplanet with idealized insolation, clear-sky radiation, 1-moment microphysics.\nUse this job to test 1-moment microphysics related features.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_hs_rhoe_equil_55km_nz63_0M_deepatmos\n\nHeld-Suarez equil-moist. Test with deep-atmosphere equations.\nUse this job to test deep-atmosphere related features.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_bw_rhoe_equil_highres_topography_earth\n\nMoist baroclinic wave with Earth topography. Test moist dycore with topography.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"longrun_aquaplanet_dyamond\n\nAquaplanet setup for DYAMOND (global high-resolution simulation). This job includes\nall the atmosphere components required for DYAMOND.","category":"page"},{"location":"longruns/","page":"Longruns","title":"Longruns","text":"amip_target_diagedmf\n\nAquaplanet setup for AMIP (atmosphere-land simulation). This job includes all the\nworking atmosphere components required for AMIP. It can be unstable as some of them\nare still under development. It will be updated whenever new components are ready.","category":"page"},{"location":"diagnostics/#Computing-and-saving-diagnostics","page":"Diagnostics","title":"Computing and saving diagnostics","text":"","category":"section"},{"location":"diagnostics/#I-want-to-compute-and-output-a-diagnostic-variable","page":"Diagnostics","title":"I want to compute and output a diagnostic variable","text":"","category":"section"},{"location":"diagnostics/#From-a-YAML-file","page":"Diagnostics","title":"From a YAML file","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"If you configure your simulation with YAML files, there are two options that are important to know about. When output_default_diagnostics is set to true, the default diagnostics for the given atmospheric model will be output. Note that they might be incompatible with your simulation (e.g., you want to output hourly maxima when the timestep is 4 hours).","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Second, you can specify the diagnostics you want to output directly in the diagnostics section of your YAML file. For instance:","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"diagnostics:\n  - short_name: rhoa\n    output_name: a_name\n    period: 3hours\n    writer: nc\n  - reduction_time: average\n    short_name: rhoa\n    period: 12hours\n    writer: h5","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"This adds two diagnostics (both for rhoa). The period keyword identifies the period over which to compute the reduction and how often to save to disk. output_name is optional, and if provided, it identifies the name of the output file.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For multiple diagnostics with the same specs, it is also possible to directly pass a vector of short_names, as in","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"diagnostics:\n  - short_name: [rhoa, ua, ta]\n    reduction_time: average\n    period: 12hours","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The default writer is NetCDF. If writer is nc or netcdf, the output is remapped non-conservatively on a Cartesian grid and saved to a NetCDF file. Currently, only 3D fields on cubed spheres are supported.","category":"page"},{"location":"diagnostics/#From-a-script","page":"Diagnostics","title":"From a script","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The simplest way to get started with diagnostics is to use the defaults for your atmospheric model. ClimaAtmos defines a function default_diagnostic. You can execute this function on an AtmosModel or on any of its fields to obtain a list of diagnostics ready to be passed to the simulation. So, for example","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"\nmodel = ClimaAtmos.AtmosModel(..., moisture_model = ClimaAtmos.DryModel(), ...)\n\ndiagnostics = ClimaAtmos.default_diagnostics(model)\n# => List of diagnostics that include the ones specified for the DryModel","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Technically, the diagnostics are represented as ScheduledDiagnostic objects, which contain information about what variable has to be computed, how often, where to save it, and so on (read below for more information on this). You can construct your own lists of ScheduledDiagnostics starting from the variables defined by ClimaAtmos. The DiagnosticVariables in ClimaAtmos are identified with by the short and unique name, so that you can access them directly with the function diagnostic_variable. One way to do so is by using the provided convenience functions for common operations, e.g., continuing the previous example","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"\npush!(diagnostics, daily_max(\"air_density\", \"air_temperature\"))","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Now diagnostics will also contain the instructions to compute the daily maximum of air_density and air_temperature.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The diagnostics that are built-in ClimaAtmos are collected in Available diagnostic variables.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"If you are using ClimaAtmos with a script-based interface, you have access to the complete flexibility in your diagnostics. Read the section about the low-level interface to see how to implement custom diagnostics, reductions, or writers.","category":"page"},{"location":"diagnostics/#The-low-level-interface","page":"Diagnostics","title":"The low-level interface","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Diagnostics are computed and output through callbacks to the main integrator. ClimaAtmos produces the list of callbacks from a ordered list of ScheduledDiagnostics. These callbacks are orchestrated by a callback orchestrate_diagnostics that runs at the end of every step and calls all the diagnostic callbacks that are scheduled to be run at that step.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"A ScheduledDiagnostic is an instruction on how to compute and output a given DiagnosticVariable (see below), along with specific choices regarding reductions, compute/output frequencies, and so on. It can be point-wise in space and time, or can be the result of a reduction in a period that is defined by output_every (e.g., the daily average temperature).","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"More specifically, a ScheduledDiagnostic contains the following pieces of data","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"variable: The diagnostic variable that has to be computed and output.\noutput_every: Frequency of how often to save the results to disk. If output_every is non-positive, only output at the first time step.\noutput_writer: Function that controls out to save the computed diagnostic variable to disk.\nreduction_time_func: If not nothing, the ScheduledDiagnostic receives an area of scratch space acc where to accumulate partial results. Then, at every compute_every, reduction_time_func is computed between the previously stored value in acc and the new value. This implements a running reduction. For example, if reduction_time_func = max, the space acc will hold the running maxima of the diagnostic. acc is reset after output.\nreduction_space_func: NOT IMPLEMENTED YET\ncompute_every: Run the computations every compute_every. This is not particularly useful for point-wise diagnostics, where we enforce that compute_every = output_every. compute_every has to evenly divide output_every.\npre_output_hook!: Function that has to be run before saving to disk for  reductions (mostly used to implement averages). The function  pre_output_hook! is called with two arguments: the value accumulated during  the reduction, and the number of times the diagnostic was computed from the  last time it was output.\noutput_short_name: A descriptive name that can be used by the  output_writer. If not provided, a default one is generated. It has to be  unique.\noutput_long_name: A descriptive name that can be used by the output_writer  as attribute. If not provided, a default one is generated.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"To implement operations like the arithmetic average, the reduction_time_func has to be chosen as +, and a pre_output_hook! that renormalize acc by the number of samples has to be provided. pre_output_hook! should mutate the accumulator in place. The return value of pre_output_hook! is discarded. An example of pre_output_hook! to compute the arithmetic average is pre_output_hook!(acc, N) = @. acc = acc / N. ClimaAtmos provides an alias to the function needed to compute averages ClimaAtmos.average_pre_output_hook!.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"For custom reductions, it is necessary to also specify the identity of operation by defining a new method to identity_of_reduction. identity_of_reduction is a function that takes a op argument, where op is the operation for which we want to define the identity. For instance, for the max, identity_of_reduction would be identity_of_reduction(::typeof{max}) = -Inf. The identities known to ClimaAtmos are defined in the diagnostics/reduction_identities.jl file. The identity is needed to ensure that we have a neutral state for the accumulators that are used in the reductions.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"A key entry in a ScheduledDiagnostic is the output_writer, the function responsible for saving the output to disk. output_writer is called with three arguments: the value that has to be output, the ScheduledDiagnostic, and the integrator. Internally, the integrator contains extra information (such as the current timestep), so the output_writer can implement arbitrarily complex behaviors. It is responsibility of the output_writer to properly use the provided information for meaningful output. ClimaAtmos provides functions that return output_writers for standard operations. The main one is currently HDF5Writer, which should be enough for most use cases. To use it, just initialize a ClimaAtmos.HDF5Writer object with your choice of configuration and pass it as a output_writer argument to the ScheduledDiagnostic. More information about the options supported by ClimaAtmos.HDF5Writer is available in its constructor.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"There are two flavors of ScheduledDiagnostics: ScheduledDiagnosticIterations, and ScheduledDiagnosticTime. The main difference between the two is the domain of definition of their frequencies, which is measured in timesteps for the first one, and in seconds for the other one. ScheduledDiagnosticTimes offer a more natural way to set up physically meaningful reductions (e.g., we want a daily average). However, it is not clear what to do when the period does not line up with the timestep. What is the expected behavior when we want a daily average but our timestep is of 10 hours? There are multiple possible answer to this question. In ClimaAtmos, we enforce that all the periods are multiples of the timestep. With this restriction, a ScheduledDiagnosticTime can be translated to a ScheduledDiagnosticIterations, where the problem is perfectly represented (in this sense, one can think of ScheduledDiagnosticIterations as being as internal representation and as ScheduledDiagnosticTime being the user-facing one).","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"ScheduledDiagnosticTime behave like as ScheduledDiagnosticIterations, with the exception that they can take a special value for compute_every, which can be set to :timestep (the symbol) to ensure that the diagnostic is computed at the end of every integration step. This is particularly convenient when defining default diagnostics, as they should be largely independent on the choice of the specific simulation being run (and its timestep).","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Given a timestep dt, a ScheduledDiagnosticIterations can be obtained from a ScheduledDiagnosticTime sd simply by calling `ScheduledDiagnosticIterations(sd, dt).","category":"page"},{"location":"diagnostics/#The-NetCDF-output","page":"Diagnostics","title":"The NetCDF output","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The NetCDF writer in ClimaAtmos saves different diagnostics to different files in the same output folder. Files are named after a combination of the diagnostic variable short_name, and the details of the temporal reduction. Inside each NetCDF file, there is only one diagnostic variable, along with the various dimensions (e.g., lat, lon, and z/z_reference).","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"When topography is present, a new 1D dimension is defined z_reference. This dimension does not have direct physical meaning but can be assumed to be the \"z\" axis. Along with dimension, a new variable z is saved to the NetCDF file. In this case, z is a multidimensional array (in general 3D). z[i, j, k] which defines the elevation on the sea level of the point of indices [i, j, k].","category":"page"},{"location":"diagnostics/#I-want-to-add-a-new-diagnostic-variable","page":"Diagnostics","title":"I want to add a new diagnostic variable","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Diagnostic variables are represented in ClimaAtmos with a DiagnosticVariable struct. Fundamentally, a DiagnosticVariable contains metadata about the variable, and a function that computes it from the state.","category":"page"},{"location":"diagnostics/#Metadata","page":"Diagnostics","title":"Metadata","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The metadata we currently support is short_name, long_name, units, comments. This metadata is relevant mainly in the context of how the variable is output. Therefore, it is responsibility of the output_writer (see ScheduledDiagnostic) to handle the metadata properly. The output_writers provided by ClimaAtmos use this metadata.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"In ClimaAtmos, we follow the convention that:","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"short_name is the name used to identify the variable in the output files and               in the file names. It is short, but descriptive. We identify               diagnostics by their short name, so the diagnostics defined by               ClimaAtmos have to have unique short_names.\nlong_name: Name used to describe the variable in the output file as attribute.\nstandard_name: Standard name, as in CF conventions\nunits: Physical units of the variable.\ncomments: More verbose explanation of what the variable is, or comments related to how             it is defined or computed.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"In ClimaAtmos, we follow the CMIP6 MIP table for short names and long names where available. Standard names in the table are not used.","category":"page"},{"location":"diagnostics/#Compute-function","page":"Diagnostics","title":"Compute function","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The other piece of information needed to specify a DiagnosticVariable is a function compute!. Schematically, a compute! has to look like","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"function compute!(out, state, cache, time)\n    if isnothing(out)\n        return ... # Calculations with the state and the cache\n    else\n        out .= ... # Calculations with the state and the cache\n    end\nend","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"The first time compute! is called, the function has to allocate memory and return its output. All the subsequent times, out will be the pre-allocated area of memory, so the function has to write the new value in place.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"Diagnostics are implemented as callbacks functions which pass the state, cache, and time from the integrator to compute!.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"compute! also takes a second argument, out, which is used to avoid extra memory allocations (which hurt performance). If out is nothing, and new area of memory is allocated. If out is a ClimaCore.Field, the operation is done in-place without additional memory allocations.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"If your diagnostic depends on the details of the model, we recommend using additional functions so that the correct one can be found through dispatching. For instance, if you want to compute relative humidity, which does not make sense for dry simulations, you should define the functions","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"function compute_relative_humidity!(\n    out,\n    state,\n    cache,\n    time,\n    moisture_model::T,\n) where {T}\n    error(\"Cannot compute relative_humidity with moisture_model = $T\")\nend\n\nfunction compute_relative_humidity!(\n    out,\n    state,\n    cache,\n    time,\n    moisture_model::T,\n) where {T <: Union{EquilMoistModel, NonEquilMoistModel}}\n    if isnothing(out)\n        return TD.relative_humidity.(thermo_params, cache.ᶜts)\n    else\n        out .= TD.relative_humidity.(thermo_params, cache.ᶜts)\n    end\nend\n\ncompute_relative_humidity!(out, state, cache, time) =\n    compute_relative_humidity!(\n        out,\n        state,\n        cache,\n        time,\n        cache.atmos.moisture_model,\n    )","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"This will return the correct relative humidity and throw informative errors when it cannot be computed. We could specialize compute_relative_humidity further if the relative humidity were computed differently for EquilMoistModel and NonEquilMoistModel.","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"In ClimaAtmos, we define some helper functions to produce error messages, so the above code can be written as","category":"page"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"compute_relative_humidity!(out, state, cache, time) =\n    compute_relative_humidity!(out, state, cache, time, cache.atmos.moisture_model)\ncompute_relative_humidity!(_, _, _, _, model::T) where {T} =\n    error_diagnostic_variable(\"relative_humidity\", model)\n\nfunction compute_relative_humidity!(\n    out,\n    state,\n    cache,\n    time,\n    ::T,\n) where {T <: Union{EquilMoistModel, NonEquilMoistModel}}\n    thermo_params = CAP.thermodynamics_params(cache.params)\n    if isnothing(out)\n        return TD.relative_humidity.(thermo_params, cache.ᶜts)\n    else\n        out .= TD.relative_humidity.(thermo_params, cache.ᶜts)\n    end\nend","category":"page"},{"location":"diagnostics/#The-ClimaAtmos-DiagnosticVariables","page":"Diagnostics","title":"The ClimaAtmos DiagnosticVariables","text":"","category":"section"},{"location":"diagnostics/","page":"Diagnostics","title":"Diagnostics","text":"ClimaAtmos comes with a collection of pre-defined DiagnosticVariable, index with their short_names. If you are extending ClimaAtmos and want to add a new diagnostic variable, go ahead and look at the files we include in diagnostics/Diagnostics.jl. You can add more diagnostics in those files or add a new one. We provide a convenience function, add_diagnostic_variable! to add new DiagnosticVariables. add_diagnostic_variable! take the same arguments as the constructor for DiagnosticVariable, but also performs additional checks. Similarly, if you want to retrieve a diagnostic from ALL_DIAGNOSTICS, use the get_diagnostic_variablefunction.","category":"page"},{"location":"surface_albedo/#Ocean-Surface-Albedo","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo","text":"","category":"section"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"The ocean surface albedo is the fraction of solar radiation that is reflected by the ocean surface. It is a key parameter in the Earth's energy balance and is important for understanding the ocean's role in the climate system. The surface ocean albedo is a function of the solar zenith angle, the sea surface roughness (which depends on wind speed) and wavelength of the incoming radiation.","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"Currently, there are two methods available to specify ocean albedo:","category":"page"},{"location":"surface_albedo/#1)-ConstantAlbedo","page":"Ocean Surface Albedo Parameterization","title":"1) ConstantAlbedo","text":"","category":"section"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"The default value is 0.38 (following [4]) and is used purely for idealized experiments.","category":"page"},{"location":"surface_albedo/#2)-RegressionFunctionAlbedo","page":"Ocean Surface Albedo Parameterization","title":"2) RegressionFunctionAlbedo","text":"","category":"section"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"This is an empirically-derived parameterization of the direct and diffuse surface albedo of Jin et al. (2011) [5] (note, reflectivity of the inner ocean is ignored). The direct reflection is calculated using the Fresnel reflection at the air-sea interface due to the difference in refractive index between air and water. Note that the current implementation is using the broadband representation (relative refractive index, n, is independent of wavelength). Its formulation is:","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"α_dir(λ μ u) = r_f(n μ) - fracr_f(n μ)r_f(n_0 μ) f(μ σ(u))\n","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"where:","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"λ\nis the wavelength (currently unused)\nμ\nis the cosine of the solar zenith angle\nu\nis the wind speed\nσ(u)\nis the mean wave slope distribution width following Cox and Munk (1954), with sigma^2 = 0003 + 000512u, with u being the surface wind speed\nr_f(n μ)\nis the Fresnel reflectance (e.g., see [6]):","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"    r_f_p(n θ) = left(fracn^2 cos(θ) - sqrtn^2 - sin^2(θ)n^2 cos(θ) + sqrtn^2 - sin^2(θ)right)^2\n","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"    r_f_s(n θ) = left(fraccos(θ) - sqrtn^2 - sin^2(θ)cos(θ) + sqrtn^2 - sin^2(θ)right)^2","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"where we assume an equal contribution from the p and s polarizations, so that r_f(n θ) = 05(r_f_p(n θ) + r_f_s(n θ)), and the perfect dielectric medium approximation.","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"n_0=134\nis the refractive index of water for visible light\nn\nis the relative refractive index of water and air (n = n_wn_a), and is assumed to be equal to n_0 for the broadband representation\nf(μ σ)\nis the regression function, defined as:","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"f(μ σ) = (p_1 + p_2μ + p_3μ^2 + p_4μ^3 + p_5σ + p_6σμ)  exp(p_7 + p_8μ + p_9μ^2 + p_10σ + p_11σμ)","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"where the coefficients are given in the table below:","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"Coefficient Value\np_1 0.0152\np_2 -1.7873\np_3 6.8972\np_4 -8.5778\np_5 4.071\np_6 -7.6446\np_7 0.1643\np_8 -7.8409\np_9 -3.5639\np_10 -2.3588\np_11 10.0538","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"Diffuse reflection is calculated depending on atmospheric conditions. For clear sky, it is calculated using nearly isotropic Rayleigh scattering, and for cloudy sky, the albedo is adjusted for the presence of clouds. The formulations are:","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"α_diff(λ μ u) = -01482 - 0012σ(u) + 01608n - 00244nσ(u)","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"for clear sky, and","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"α_diff(λ μ u) = -01479 + 01502n - 0016nσ(u)","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"for cloudy sky. In the current implementation we assume clear skies everywhere.","category":"page"},{"location":"surface_albedo/#3)-CouplerAlbedo","page":"Ocean Surface Albedo Parameterization","title":"3) CouplerAlbedo","text":"","category":"section"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"This informs ClimaAtmos that albedo will be set by the coupler.","category":"page"},{"location":"surface_albedo/#Comparison-of-RegressionFunctionAlbedo-with-Jin-et-al.-(2011)","page":"Ocean Surface Albedo Parameterization","title":"Comparison of RegressionFunctionAlbedo with Jin et al. (2011)","text":"","category":"section"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"include(\"surface_albedo_jin11_plots.jl\")","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"direct albedo (compare with Fig. 2)","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"(Image: )","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"diffuse albedo (compare with Fig. 4)","category":"page"},{"location":"surface_albedo/","page":"Ocean Surface Albedo Parameterization","title":"Ocean Surface Albedo Parameterization","text":"(Image: )","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Initial-conditions","page":"API","title":"Initial conditions","text":"","category":"section"},{"location":"api/#General","page":"API","title":"General","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaAtmos.InitialConditions.InitialCondition\nClimaAtmos.InitialConditions.IsothermalProfile\nClimaAtmos.InitialConditions.DecayingProfile\nClimaAtmos.InitialConditions.hydrostatic_pressure_profile","category":"page"},{"location":"api/#ClimaAtmos.InitialConditions.InitialCondition","page":"API","title":"ClimaAtmos.InitialConditions.InitialCondition","text":"InitialCondition\n\nA mechanism for specifying the LocalState of an AtmosModel at every point in the domain. Given some initial_condition, calling initial_condition(params) returns a function of the form local_state(local_geometry)::LocalState.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.IsothermalProfile","page":"API","title":"ClimaAtmos.InitialConditions.IsothermalProfile","text":"IsothermalProfile(; temperature = 300)\n\nAn InitialCondition with a uniform temperature profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.DecayingProfile","page":"API","title":"ClimaAtmos.InitialConditions.DecayingProfile","text":"DecayingProfile(; perturb = true)\n\nAn InitialCondition with a decaying temperature profile, and with an optional perturbation to the temperature.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.hydrostatic_pressure_profile","page":"API","title":"ClimaAtmos.InitialConditions.hydrostatic_pressure_profile","text":"hydrostatic_pressure_profile(; thermo_params, p_0, [T, θ, q_tot, z_max])\n\nSolves the initial value problem p'(z) = -g * ρ(z) for all z ∈ [0, z_max], given p(0), either T(z) or θ(z), and optionally also q_tot(z). If q_tot(z) is not given, it is assumed to be 0. If z_max is not given, it is assumed to be 30 km. Note that z_max should be the maximum elevation to which the specified profiles T(z), θ(z), and/or q_tot(z) are valid.\n\n\n\n\n\n","category":"function"},{"location":"api/#Plane-/-Box","page":"API","title":"Plane / Box","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaAtmos.InitialConditions.AgnesiHProfile\nClimaAtmos.InitialConditions.ScharProfile\nClimaAtmos.InitialConditions.DryDensityCurrentProfile\nClimaAtmos.InitialConditions.RisingThermalBubbleProfile","category":"page"},{"location":"api/#ClimaAtmos.InitialConditions.AgnesiHProfile","page":"API","title":"ClimaAtmos.InitialConditions.AgnesiHProfile","text":"AgnesiHProfile(; perturb = false)\n\nAn InitialCondition with a decaying temperature profile\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.ScharProfile","page":"API","title":"ClimaAtmos.InitialConditions.ScharProfile","text":"ScharProfile(; perturb = false)\n\nAn InitialCondition with a prescribed Brunt-Vaisala Frequency\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.DryDensityCurrentProfile","page":"API","title":"ClimaAtmos.InitialConditions.DryDensityCurrentProfile","text":"DryDensityCurrentProfile(; perturb = false)\n\nAn InitialCondition with an isothermal background profile, with a negatively buoyant bubble, and with an optional perturbation to the temperature.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.RisingThermalBubbleProfile","page":"API","title":"ClimaAtmos.InitialConditions.RisingThermalBubbleProfile","text":"RisingThermalBubbleProfile(; perturb = false)\n\nAn InitialCondition with an isothermal background profile, with a positively buoyant bubble, and with an optional perturbation to the temperature.\n\n\n\n\n\n","category":"type"},{"location":"api/#Sphere","page":"API","title":"Sphere","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaAtmos.InitialConditions.DryBaroclinicWave\nClimaAtmos.InitialConditions.MoistBaroclinicWaveWithEDMF\nClimaAtmos.InitialConditions.MoistAdiabaticProfileEDMFX","category":"page"},{"location":"api/#ClimaAtmos.InitialConditions.DryBaroclinicWave","page":"API","title":"ClimaAtmos.InitialConditions.DryBaroclinicWave","text":"DryBaroclinicWave(; perturb = true)\n\nAn InitialCondition with a dry baroclinic wave, and with an optional perturbation to the horizontal velocity.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.MoistBaroclinicWaveWithEDMF","page":"API","title":"ClimaAtmos.InitialConditions.MoistBaroclinicWaveWithEDMF","text":"MoistBaroclinicWaveWithEDMF(; perturb = true)\n\nThe same InitialCondition as MoistBaroclinicWave, except with an initial TKE of 0 and an initial draft area fraction of 0.2.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.MoistAdiabaticProfileEDMFX","page":"API","title":"ClimaAtmos.InitialConditions.MoistAdiabaticProfileEDMFX","text":"MoistAdiabaticProfileEDMFX(; perturb = true)\n\nAn InitialCondition with a moist adiabatic temperature profile, and with an optional perturbation to the temperature.\n\n\n\n\n\n","category":"type"},{"location":"api/#Cases-from-literature","page":"API","title":"Cases from literature","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaAtmos.InitialConditions.Nieuwstadt\nClimaAtmos.InitialConditions.GABLS\nClimaAtmos.InitialConditions.GATE_III\nClimaAtmos.InitialConditions.ARM_SGP\nClimaAtmos.InitialConditions.DYCOMS_RF01\nClimaAtmos.InitialConditions.DYCOMS_RF02\nClimaAtmos.InitialConditions.Rico\nClimaAtmos.InitialConditions.TRMM_LBA\nClimaAtmos.InitialConditions.LifeCycleTan2018\nClimaAtmos.InitialConditions.Bomex\nClimaAtmos.InitialConditions.Soares","category":"page"},{"location":"api/#ClimaAtmos.InitialConditions.Nieuwstadt","page":"API","title":"ClimaAtmos.InitialConditions.Nieuwstadt","text":"Nieuwstadt\n\nThe InitialCondition described in [7], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.GABLS","page":"API","title":"ClimaAtmos.InitialConditions.GABLS","text":"GABLS\n\nThe InitialCondition described in [8], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.GATE_III","page":"API","title":"ClimaAtmos.InitialConditions.GATE_III","text":"GATE_III\n\nThe InitialCondition described in [9], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.ARM_SGP","page":"API","title":"ClimaAtmos.InitialConditions.ARM_SGP","text":"ARM_SGP\n\nThe InitialCondition described in [10], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.DYCOMS_RF01","page":"API","title":"ClimaAtmos.InitialConditions.DYCOMS_RF01","text":"DYCOMS_RF01\n\nThe InitialCondition described in [11], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.DYCOMS_RF02","page":"API","title":"ClimaAtmos.InitialConditions.DYCOMS_RF02","text":"DYCOMS_RF02\n\nThe InitialCondition described in [12], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.Rico","page":"API","title":"ClimaAtmos.InitialConditions.Rico","text":"Rico\n\nThe InitialCondition described in [13], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.TRMM_LBA","page":"API","title":"ClimaAtmos.InitialConditions.TRMM_LBA","text":"TRMM_LBA\n\nThe InitialCondition described in [14], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.LifeCycleTan2018","page":"API","title":"ClimaAtmos.InitialConditions.LifeCycleTan2018","text":"LifeCycleTan2018\n\nThe InitialCondition described in [15], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.Bomex","page":"API","title":"ClimaAtmos.InitialConditions.Bomex","text":"Bomex\n\nThe InitialCondition described in [16], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClimaAtmos.InitialConditions.Soares","page":"API","title":"ClimaAtmos.InitialConditions.Soares","text":"Soares\n\nThe InitialCondition described in [17], but with a hydrostatically balanced pressure profile.\n\n\n\n\n\n","category":"type"},{"location":"api/#Implicit-Solver","page":"API","title":"Implicit Solver","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaAtmos.ImplicitEquationJacobian","category":"page"},{"location":"api/#ClimaAtmos.ImplicitEquationJacobian","page":"API","title":"ClimaAtmos.ImplicitEquationJacobian","text":"ImplicitEquationJacobian(\n    Y, atmos; \n    approximate_solve_iters, diffusion_flag, topography_flag, sgs_advection_flag, transform_flag\n)\n\nA wrapper for the matrix EY, where E(Y) is the \"error\" of the implicit step with the state Y.\n\nBackground\n\nWhen we use an implicit or split implicit-explicit (IMEX) timestepping scheme, we end up with a nonlinear equation of the form E(Y) = 0, where\n\n    E(Y) = Y_imp(Y) - Y = hatY + Δt * T_imp(Y) - Y\n\nIn this expression, Y_imp(Y) denotes the state at some time t + Δt. This can be expressed as the sum of hatY, the contribution from the state at time t (and possibly also at earlier times, depending on the order of the timestepping scheme), and Δt * T_imp(Y), the contribution from the implicit tendency T_imp between times t and t + Δt. The new state at the end of each implicit step in the timestepping scheme is the value of Y that solves this equation, i.e., the value of Y that is consistent with the state Y_imp(Y) predicted by the implicit step.\n\nNote: When we use a higher-order timestepping scheme, the full step Δt is divided into several sub-steps or \"stages\", where the duration of stage i is Δt * γ_i for some constant γ_i between 0 and 1.\n\nIn order to solve this equation using Newton's method, we must specify the derivative EY. Since hatY does not depend on Y (it is only a function of the state at or before time t), this derivative is\n\n    E(Y) = Δt * T_imp(Y) - I\n\nIn addition, we must specify how to divide E(Y) by this derivative, i.e., how to solve the linear equation\n\n    E(Y) * ΔY = E(Y)\n\nNote: This equation comes from assuming that there is some ΔY such that E(Y - ΔY) = 0 and making the first-order approximation\n\n    E(Y - ΔY) approx E(Y) - E(Y) * ΔY\n\nAfter initializing Y to Y0 = hatY, Newton's method executes the following steps:\n\nCompute the derivative E(Y0).\nCompute the implicit tendency T_imp(Y0) and use it to get E(Y0).\nSolve the linear equation E(Y0) * ΔY0 = E(Y0) for ΔY0.\nUpdate Y to Y1 = Y0 - ΔY0.\n\nIf the number of Newton iterations is limited to 1, this new value of Y is taken to be the solution of the implicit equation. Otherwise, this sequence of steps is repeated, i.e., ΔY1 is computed and used to update Y to Y2 = Y1 - ΔY1, then ΔY2 is computed and used to update Y to Y3 = Y2 - ΔY2, and so on. The iterative process is terminated either when the error E(Y) is sufficiently close to 0 (according to the convergence condition passed to Newton's method), or when the maximum number of iterations is reached.\n\nArguments\n\nY::FieldVector: the state of the simulation\natmos::AtmosModel: the model configuration\napproximate_solve_iters::Int: number of iterations to take for the approximate linear solve required when diffusion_flag = UseDerivative()\ndiffusion_flag::DerivativeFlag: whether the derivative of the diffusion tendency with respect to the quantities being diffused should be computed or approximated as 0; must be either UseDerivative() or IgnoreDerivative() instead of a Bool to ensure type-stability\ntopography_flag::DerivativeFlag: whether the derivative of vertical contravariant velocity with respect to horizontal covariant velocity should be computed or approximated as 0; must be either UseDerivative() or IgnoreDerivative() instead of a Bool to ensure type-stability\nsgs_advection_flag::DerivativeFlag: whether the derivative of the subgrid-scale advection tendency with respect to the updraft quantities should be computed or approximated as 0; must be either UseDerivative() or IgnoreDerivative() instead of a Bool to ensure type-stability\ntransform_flag::Bool: whether the error should be transformed from E(Y) to E(Y)Δt, which is required for non-Rosenbrock timestepping schemes from OrdinaryDiffEq.jl\n\n\n\n\n\n","category":"type"},{"location":"api/#Helper","page":"API","title":"Helper","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaAtmos.InitialConditions.ColumnInterpolatableField","category":"page"},{"location":"api/#ClimaAtmos.InitialConditions.ColumnInterpolatableField","page":"API","title":"ClimaAtmos.InitialConditions.ColumnInterpolatableField","text":"ColumnInterpolatableField(::Fields.ColumnField)\n\nA column field object that can be interpolated in the z-coordinate. For example:\n\ncif = ColumnInterpolatableField(column_field)\nz = 1.0\ncolumn_field_at_z = cif(z)\n\nwarn: Warn\nThis function allocates and is not GPU-compatible so please avoid using this inside step! only use this for initialization.\n\n\n\n\n\n","category":"type"},{"location":"equations/#Equations","page":"Equations","title":"Equations","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"note: Note\nThis follows what is currently implemented in examples: it should be kept up-to-date as code is modified. If you think something should be changed (but hasn't been), please add a note.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This describes the ClimaAtmos model equations and its discretizations. Where possible, we use a coordinate invariant form: the ClimaCore operators generally handle the conversions between bases internally.","category":"page"},{"location":"equations/#Prognostic-variables","page":"Equations","title":"Prognostic variables","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"rho: density in kg/m³. This is discretized at cell centers.\nboldsymbolu velocity, a vector in m/s. This is discretized via boldsymbolu = boldsymbolu_h + boldsymbolu_v where\nboldsymbolu_h = u_1 boldsymbole^1 + u_2 boldsymbole^2 is the projection onto horizontal covariant components (covariance here means with respect to the reference element), stored at cell centers.\nboldsymbolu_v = u_3 boldsymbole^3 is the projection onto the vertical covariant components, stored at cell faces.\nenergy, stored at cell centers; can be either:\nrho e: total energy in J/m³\nrho e_textint: internal energy in J/m³\nrho chi: other conserved scalars (moisture, tracers, etc), again stored at cell centers.","category":"page"},{"location":"equations/#Operators","page":"Equations","title":"Operators","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"We make use of the following operators","category":"page"},{"location":"equations/#Reconstruction","page":"Equations","title":"Reconstruction","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"I^c is the face-to-center reconstruction operator (arithmetic mean)\nI^f is the center-to-face reconstruction operator (arithmetic mean)\nWI^f is the center-to-face weighted reconstruction operator\nWI^f(J x) = I^f(J*x)  I^f(J), where J is the value of the Jacobian for use in the weighted interpolation operator\nU^f is the 1st or 3rd-order center-to-face upwind product operator # fix link","category":"page"},{"location":"equations/#Differential-operators","page":"Equations","title":"Differential operators","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"hatmathcalD_h is the discrete horizontal spectral weak divergence.\nmathcalD^c_v is the face-to-center vertical divergence.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"todo: Todo\nAdd vertical diffusive tendencies (including surface fluxes)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"mathcalG_h is the discrete horizontal spectral gradient.\nmathcalG^f_v is the center-to-face vertical gradient.\nthe gradient is set to 0 at the top and bottom boundaries.\nmathcalC_h is the curl components involving horizontal derivatives\nmathcalC_hboldsymbolu_h returns a vector with only vertical contravariant components.\nmathcalC_hboldsymbolu_v returns a vector with only horizontal contravariant components.\nhatmathcalC_h is the weak curl components involving horizontal derivatives\nmathcalC^f_v is the center-to-face curl involving vertical derivatives.\nmathcalC^f_vboldsymbolu_h returns a vector with only a horizontal contravariant component.\nthe curl is set to 0 at the top and bottom boundaries.\nWe need to clarify how best to handle this.","category":"page"},{"location":"equations/#Projection","page":"Equations","title":"Projection","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"mathcalP is the direct stiffness summation (DSS) operation, which computes the projection onto the continuous spectral element basis.","category":"page"},{"location":"equations/#Auxiliary-and-derived-quantities","page":"Equations","title":"Auxiliary and derived quantities","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"boldsymbolOmega is the planetary angular velocity. We use either:\na shallow atmosphere approximation, with  math  \\boldsymbol{\\Omega} = \\Omega \\sin(\\phi) \\boldsymbol{e}^v  where phi is latitude, and Omega is the planetary rotation rate in rads/sec (for Earth, 729212 times 10^-5 s^-1) and boldsymbole^v is the unit radial basis vector. This implies that the horizontal contravariant component boldsymbolOmega^h is zero.\na deep atmosphere, with  math  \\boldsymbol{\\Omega} = (0, 0, \\Omega)  i.e. aligned with Earth's rotational axis.\ntildeboldsymbolu is the mass-weighted reconstruction of velocity at the interfaces: by interpolation of contravariant components\ntildeboldsymbolu = WI^f(rho J boldsymbolu_h) + boldsymbolu_v\nbarboldsymbolu is the reconstruction of velocity at cell-centers, carried out by linear interpolation of the covariant vertical component:\nbarboldsymbolu = boldsymbolu_h + I_c(boldsymbolu_v)\nPhi = g z is the geopotential, where g is the gravitational acceleration rate and z is altitude above the mean sea level.\nboldsymbolb is the reduced gravitational acceleration\nboldsymbolb = - fracrho - rho_textrefrho nabla Phi\nrho_textref is the reference state density\nK = tfrac12 boldsymbolu^2 is the specific kinetic energy (J/kg), reconstructed at cell centers by\nK = tfrac12 (boldsymbolu_h cdot boldsymbolu_h + 2 boldsymbolu_h cdot I_c (boldsymbolu_v) + I_c(boldsymbolu_v cdot boldsymbolu_v))\nwhere boldsymbolu_h is defined on cell-centers, boldsymbolu_v is defined on cell-faces, and I_c (boldsymbolu_v) is interpolated using covariant components.\np is air pressure, derived from the thermodynamic state, reconstructed at cell centers.\np_textref is the reference state pressure. It is related to the reference state density by analytical hydrostatic balance: nabla p_textref = - rho_textref nabla Phi.\nboldsymbolF_R are the radiative fluxes: these are assumed to align vertically (i.e. the horizontal contravariant components are zero), and are constructed at cell faces from RRTMGP.jl.\nnu_u, nu_h, and nu_chi are hyperdiffusion coefficients, and c is the divergence damping factor.\nNo-flux boundary conditions are enforced by requiring the third contravariant component of the face-valued velocity at the boundary, boldsymboltildeu^v, to be zero. The vertical covariant velocity component is computed as\ntildeu_v = tfrac-(u_1g^31 + u_2g^32)g^33","category":"page"},{"location":"equations/#Equations-and-discretizations","page":"Equations","title":"Equations and discretizations","text":"","category":"section"},{"location":"equations/#Mass","page":"Equations","title":"Mass","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Follows the continuity equation","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t rho = - nabla cdot(rho boldsymbolu) + rho mathcalS_qt","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This is discretized using the following","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t rho\n= - hatmathcalD_h rho barboldsymbolu - mathcalD^c_v leftWI^f( J rho) tildeboldsymbolu right + rho mathcalS_qt","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"with the","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"-mathcalD^c_vWI^f(J rho) boldsymbolu_v","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"term treated implicitly (check this)","category":"page"},{"location":"equations/#Momentum","page":"Equations","title":"Momentum","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Uses the advective form equation","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t boldsymbolu  = - (2 boldsymbolOmega + nabla times boldsymbolu) times boldsymbolu - frac1rho nabla (p - p_textref)  + boldsymbolb - nabla K","category":"page"},{"location":"equations/#Horizontal-momentum","page":"Equations","title":"Horizontal momentum","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"By breaking the curl and cross product terms into horizontal and vertical contributions, and removing zero terms (e.g. nabla_v  times boldsymbolu_v = 0), we obtain","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t boldsymbolu_h  =\n  - (2 boldsymbolOmega^h + nabla_v times boldsymbolu_h +  nabla_h times boldsymbolu_v) times boldsymbolu^v\n  - (2 boldsymbolOmega^v + nabla_h times boldsymbolu_h) times boldsymbolu^h\n  - frac1rho nabla_h (p - p_textref)  - nabla_h (Phi + K)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where boldsymbolu^h and boldsymbolu^v are the horizontal and vertical contravariant vectors. The effect of topography is accounted for through the computation of the contravariant velocity components (projections from the covariant velocity representation) prior to computing the cross-product contributions.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This is stabilized with the addition of 4th-order vector hyperviscosity","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"-nu_u  nabla_h^2 (nabla_h^2(boldsymboloverlineu))","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"projected onto the first two contravariant directions, where nabla_h^2(boldsymbolv) is the horizontal vector Laplacian. For grid scale hyperdiffusion, boldsymbolv is identical to boldsymboloverlineu, the cell-center valued velocity vector.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"nabla_h^2(boldsymbolv) = nabla_h(nabla_h cdot boldsymbolv) - nabla_h times (nabla_h times boldsymbolv)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"The (2 boldsymbolOmega^h + nabla_v times boldsymbolu_h + nabla_h times boldsymbolu_v) times boldsymbolu^v term is discretized as:","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracI^c(2 boldsymbolOmega^h + mathcalC^f_vboldsymbolu_h + mathcalC_hboldsymbolu_v) times (I^f(rho J)tildeboldsymbolu^v)rho J","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"omega^h = (nabla_v times boldsymbolu_h + nabla_h times boldsymbolu_v)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"The (2 boldsymbolOmega^v + nabla_h times boldsymbolu_h) times boldsymbolu^h term is discretized as","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"(2 boldsymbolOmega^v + mathcalC_hboldsymbolu_h) times boldsymbolu^h","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"and the frac1rho nabla_h (p - p_h)  + nabla_h (Phi + K) as","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"frac1rho mathcalG_hp - p_textref + mathcalG_hPhi + K ","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where all these terms are treated explicitly.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"The hyperviscosity term is","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"- nu_u left c  hatmathcalG_h ( mathcalD(boldsymbolpsi_h) ) - hatmathcalC_h( mathcalC_h( boldsymbolpsi_h )) right","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"boldsymbolpsi_h = mathcalP left hatmathcalG_h ( mathcalD(boldsymbolu_h) ) - hatmathcalC_h( mathcalC_h( boldsymbolu_h )) right","category":"page"},{"location":"equations/#Vertical-momentum","page":"Equations","title":"Vertical momentum","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Similarly for vertical velocity","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t boldsymbolu_v  =\n  - (2 boldsymbolOmega^h + nabla_v times boldsymbolu_h + nabla_h times boldsymbolu_v) times boldsymbolu^h\n  - frac1rho nabla_v (p - p_textref) - fracrho - rho_textrefrho nabla_v Phi - nabla_v K ","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"The (2 boldsymbolOmega^h + nabla_v times boldsymbolu_h + nabla_h times boldsymbolu_v) times boldsymbolu^h term is discretized as","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"(2 boldsymbolOmega^h + mathcalC^f_vboldsymbolu_h + mathcalC_hboldsymbolu_v) times I^f(boldsymbolu^h) ","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"and the frac1rho nabla_v (p - p_textref) - fracrho - rho_textrefrho nabla_v Phi - nabla_v K term as","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"frac1I^f(rho) mathcalG^f_vp - p_textref - fracI^f(rho - rho_textref)I^f(rho) mathcalG^f_vPhi - mathcalG^f_vK ","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"with the latter treated implicitly.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This is stabilized with the addition of 4th-order vector hyperviscosity","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"-nu_u  nabla_h^2 (nabla_h^2(boldsymboloverlineu))","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"projected onto the third contravariant direction.","category":"page"},{"location":"equations/#Total-energy","page":"Equations","title":"Total energy","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t rho e = - nabla cdot((rho e + p) boldsymbolu + boldsymbolF_R) + rho mathcalS_e","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"which is stabilized with the addition of a 4th-order hyperdiffusion term on total enthalpy:","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"- nu_h nabla cdot left( rho nabla^3 left(fracρe + pρ right)right)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This is discretized using","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t rho e approx\n- hatmathcalD_h (rho e + p) barboldsymbolu \n- mathcalD^c_v left WI^f(Jrho)   tildeboldsymbolu  I^f left(fracrho e + prho right)\n  + boldsymbolF_R right - nu_h hatmathcalD_h( rho mathcalG_h(psi) )","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"psi = mathcalP left hatmathcalD_h left( mathcalG_h left(fracρe + pρ right)right) right","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Currently the central reconstruction","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"- mathcalD^c_v left WI^f(Jrho)   tildeboldsymbolu  I^f left(fracrho e + prho right) right","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"is treated implicitly.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"todo: Todo\nThe Jacobian computation should be updated so that the upwinded term- mathcalD^c_vleftWI^f(J rho) U^fleft(boldsymbolu_v fracrho e + prho right)rightis treated implicitly.","category":"page"},{"location":"equations/#Scalars","page":"Equations","title":"Scalars","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"For an arbitrary scalar chi, the density-weighted scalar rhochi follows the continuity equation","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t rho chi = - nabla cdot(rho chi boldsymbolu) + rho mathcalS_chi","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This is stabilized with the addition of a 4th-order hyperdiffusion term","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"- nu_chi nabla cdot(rho nabla^3(chi))","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This is discretized using","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracpartialpartial t rho chi approx\n- hatmathcalD_h rho chi barboldsymbolu\n- mathcalD^c_v left WI^f(Jrho)  U^fleft( tildeboldsymbolu  fracrho chirho right) right\n- nu_chi hatmathcalD_h ( rho  mathcalG_h (psi) )","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"psi = mathcalP left hatmathcalD_h left( mathcalG_h left( fracrho chirho right)right) right","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Currently the central reconstruction","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"- mathcalD^c_v left WI^f(Jrho)  tildeboldsymbolu  I^fleft( fracrho chirho right) right","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"is treated implicitly.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"todo: Todo\nThe Jacobian computation should be updated so that the upwinded term- mathcalD^c_vleftWI^f(J rho) U^fleft(I^f(boldsymbolu_h) + boldsymbolu_v fracrho chirho right) rightis treated implicitly.","category":"page"},{"location":"equations/#Microphysics-source-terms","page":"Equations","title":"Microphysics source terms","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Sources from cloud microphysics mathcalS represent the transfer of mass   between the working fluid (dry air, water vapor cloud liquid and cloud ice)   and precipitation (rain and snow),   as well as the latent heat release due to phase changes.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"The scalars rho q_rai and rho q_sno are part of the state vector   when running simulations with 1-moment microphysics scheme,   and represent the specific humidity of liquid and solid precipitation   (i.e. rain and snow).","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"q_rai = fracm_raim_dry + m_vap + m_liq + m_ice \n\nq_sno = fracm_snom_dry + m_vap + m_liq + m_ice","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"The different source terms are provided by   CloudMicrophysics.jl library   and are defined as the change of mass of one of the cloud condensate or   precipitation species normalised by the mass of the working fluid. See the CloudMicrophysics.jl docs   for more details.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"todo: Todo\nThroughout the rest of the derivations we are assuming that the volume of the working fluid is constant (not the pressure). This is strange for phase changes and needs more thinking.","category":"page"},{"location":"equations/#Case-1:-Mass-of-the-working-fluid-is-changed","page":"Equations","title":"Case 1: Mass of the working fluid is changed","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"When the phase change is happening within the working fluid   (for example condensation from water vapor to liquid water),   there is no change to any of the state variables. Considering the transition from   x rightarrow y where x is either    water vapor, cloud liquid water or cloud ice and   y is either rain or snow","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"mathcalS_x rightarrow y = fracfracdm_xdtm_dry + m_vap + m_liq + m_ice","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho =\nfracddt rho q_tot =\nrho mathcalS_x rightarrow y =\n- fracddt rho q_y","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho e = rho mathcalS_x rightarrow y (I_y + Phi)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where I_y is the internal energy of the y phase. This formula applies to the majority of microphysics processes. Namely, it is valid for processes where T=const such as   autoconversion and accretion between species of the same phase. It is also valid for rain evaporation, deposition/sublimation, and   accretion of cloud water and snow in temperatures below freezing   (which result in snow).","category":"page"},{"location":"equations/#Case-2:-Phase-change-outside-of-the-working-fluid","page":"Equations","title":"Case 2: Phase change outside of the working fluid","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"For cases where both x and y are not part of the working fluid   (melting of snow, freezing of rain)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"mathcalS_x rightarrow y = fracfracdm_xdtm_dry + m_vap + m_liq + m_ice","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho q_x =\n- fracddt rho q_y =\nrho mathcalS_x rightarrow y","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho = fracddt rho q_tot = 0","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho e = - rho mathcalS_x rightarrow y L_f","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"where L_f is the latent heat of fusion. The sign in the last equation assumes x stands for rain and y for snow.","category":"page"},{"location":"equations/#Additional-cases","page":"Equations","title":"Additional cases","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"Accretion of cloud ice by rain results in snow. This process combines the effects from the loss of working fluid q_ice    (described by case 1)    and the phase change from rain to snow    (described by case 2).","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"Accretion of cloud liquid by snow in temperatures above freezing results in rain. It is assummed that some fraction alpha of snow is melted during the process   and both cloud liquid and melted snow are turned into rain.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"mathcalS_acc = fracfracdm_liqdtm_dry + m_vap + m_liq + m_ice","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho = fracddt rho q_tot = rho S_acc","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho q_sno = rho alpha S_acc","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho q_rai = - rho (1 + alpha) S_acc","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"fracddt rho e = rho mathcalS_acc ((1+alpha) I_liq - alpha I_ice + Phi)","category":"page"},{"location":"equations/#Stability-and-positivity","page":"Equations","title":"Stability and positivity","text":"","category":"section"},{"location":"equations/","page":"Equations","title":"Equations","text":"All source terms are individually limited such that they don't exceed the   available tracer specific humidity divided by a coefficient a.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"mathcalS_x rightarrow y = min(mathcalS_x rightarrow y fracq_xa  dt)","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"This will not ensure positivity because the sum of all source terms,   combined with the advection tendency,   could still drive the solution to negative numbers. It should however help mitigate some of the problems. The source terms functions treat negative specific humidities as zeros,   so the simulations should be stable even with small negative numbers.","category":"page"},{"location":"equations/","page":"Equations","title":"Equations","text":"We do not apply hyperdiffusion for precipitation tracers.","category":"page"},{"location":"radiative_equilibrium/#Radiative-Equilibrium-Example","page":"Radiative Equilibrium","title":"Radiative Equilibrium Example","text":"","category":"section"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"A suite of concrete examples are provided here as a guidance for running single column Radiative Equilibrium.  ","category":"page"},{"location":"radiative_equilibrium/#Radiative-Equilibrium","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"","category":"section"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Radiative equilibrium is a useful framework for analyzing atmospheric temperature profiles with different atmosphere conditions. In radiative equilibrium, we only consider heat exchange from radiation. In this example, we only match the total energy, and assume a fixed relative humidity to get specific humidity.","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"To run a radiative equilibrium simulation, create a yaml file (or use a default one) and run the following commands in your terminal (after instantiating the necessary packages):","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"The yaml file should look something like this: mysim.yml","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"rad: \"clearsky\" \nidealized_h2o: true \nhyperdiff: \"false\" \nconfig: \"column\" \ninitial_condition: \"IsothermalProfile\" \nz_max: 70000\nz_elem: 70 \ndz_bottom: 100 \ndz_top: 10000 \nt_end: \"654days\" \ndt: \"3hours\" \ndt_save_to_sol: \"30hours\" \ndt_save_state_to_disk: \"100days\" \nprognostic_surface: \"true\" \njob_id: \"single_column_radiative_equilibrium_clearsky_prognostic_surface_temp\"","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Then run the simulation with the following command:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"julia --project=examples examples/driver.jl --config_file path to mysim.yml","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"The configuration in the yaml file above can be changed to adjust to the kind of simulation desired. Options such as t_end can be increased to the desired simulation time. Other arguments such as radiation type can be changed based on the options in default_config.yml.","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"After a simulation is ran the output files should be available in the output folder, where hdf5 files store all the simulation's data, and two mp4s should be produced with a vertical temperature profile and a vertical wind profile which change over time. If you want to quickly access data from the final day of the simulation simply add a -i to the command line input, like so:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"julia -i --project=examples examples/driver.jl --config_file filepath","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"This will bring you into a julia environment where the current state of the simulation can be accessed. Run propertynames(Y) and propertynames(p) to see accessible values, some examples:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"(Image: )","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Here is a typical vertical temperature profile on the final day of a simulation (the dot is surface temperature):","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"(Image: )","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Note: The surface temperature must also converge before the simulation reaches radiative equilibrium, here is a typical convergence of surface temperature plot:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"(Image: )","category":"page"},{"location":"radiative_equilibrium/#Greenhouse-Gas-Concentrations","page":"Radiative Equilibrium","title":"Greenhouse Gas Concentrations","text":"","category":"section"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"In radiation.jl one can change the concentrations of greenhouse gases in order to test their effects on the atmospheric temperature profile.","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"To change the ozone concentration multiply the following variable by the desired coefficient:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"center_volume_mixing_ratio_o3 =\n                RRTMGPI.field2array(@. FT(pressure2ozone(default_cache.ᶜp))) * desired_coefficient","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Here are the equilibrium temperature profiles under different ozone concentrations:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"(Image: ) (Image: )","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"To change the CO2 concentration, multiply the volume mixing ratio by the desired coefficient:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"volume_mixing_ratio_co2 = input_vmr(\"carbon_dioxide_GM\") * desired_coefficient","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Here are the equilibrium temperature profiles under different CO2 concentrations:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"(Image: ) (Image: )","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"Similarly, one can change the concentration of any other gases in the atmosphere","category":"page"},{"location":"radiative_equilibrium/#Data-extraction-in-Julia","page":"Radiative Equilibrium","title":"Data extraction in Julia","text":"","category":"section"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"To access the data from hdf5 files one can use the following code to create a var diagnostics which stores values from a hdf5 file path:","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"import ClimaAtmos: time_from_filename\nimport ClimaCore: Geometry, Spaces, Fields, InputOutput\nimport ClimaComms\nimport CairoMakie: Makie\nimport Statistics: mean\n\nfunction read_hdf5_file(file_path)\n    reader =\n        InputOutput.HDF5Reader(file_path, ClimaComms.SingletonCommsContext())\n    diagnostics = InputOutput.read_field(reader, \"diagnostics\")\n    close(reader)\n    return time_from_filename(file_path), diagnostics\nend\n\ntime, diagnostics = read_hdf5_file(\"sample/file/path\")","category":"page"},{"location":"radiative_equilibrium/","page":"Radiative Equilibrium","title":"Radiative Equilibrium","text":"diagnostics will contain the values from the state of the simulation at a given time. propertynames(diagnostics) can be useful for finding accessible values. For example, diagnostics.sfc_temperature contains the surface temperature at a given time in the simulation.","category":"page"},{"location":"repl_scripts/#Julia-scripts-per-Buildkite-job","page":"REPL scripts","title":"Julia scripts per Buildkite job","text":"","category":"section"},{"location":"repl_scripts/","page":"REPL scripts","title":"REPL scripts","text":"include(\"repl_scripts.jl\")","category":"page"},{"location":"contributor_guide/#Contributors-Guide","page":"Contributor Guide","title":"Contributors Guide","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Thank you for considering contributions to ClimaAtmos! We hope this guide helps you make a contribution.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Feel free to ask us questions and chat with us at any time about any topic at all by:","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Opening a GitHub issue","category":"page"},{"location":"contributor_guide/#Creating-issues","page":"Contributor Guide","title":"Creating issues","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"The simplest way to contribute to ClimaAtmos is to create or comment on issues.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"The most useful bug reports:","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Provide an explicit code snippet –- not just a link –- that reproduces the bug in the latest tagged version of ClimaAtmos. This is sometimes called the \"minimal working example\". Reducing bug-producing code to a minimal example can dramatically decrease the time it takes to resolve an issue.\nPaste the entire error received when running the code snippet, even if it's unbelievably long.\nUse triple backticks (e.g., ```some_code; and_some_more_code;```) to enclose code snippets, and other markdown formatting syntax to make your issue easy and quick to read.\nReport the ClimaAtmos version, Julia version, machine (especially if using a GPU) and any other possibly useful details of the computational environment in which the bug was created.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Discussions are recommended for asking questions about (for example) the user interface, implementation details, science, and life in general.","category":"page"},{"location":"contributor_guide/#But-I-want-to-*code*!","page":"Contributor Guide","title":"But I want to code!","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"New users help write ClimaAtmos code and documentation by forking the ClimaAtmos repository, using git to edit code and docs, and then creating a pull request. Pull requests are reviewed by ClimaAtmos collaborators.\nA pull request can be merged once it is reviewed and approved by collaborators. If the pull request author has write access, they have the responsibility of merging their pull request. Otherwise, ClimaAtmos.jl collaborators will execute the merge with permission from the pull request author.\nNote: for small or minor changes (such as fixing a typo in documentation), the GitHub editor is super useful for forking and opening a pull request with a single click.\nWrite your code with love and care. In particular, conform to existing ClimaAtmos style and formatting conventions. For example, we love verbose and explicit variable names, use TitleCase for types, snake_case for objects, and always.put.spaces.after.commas. For formatting decisions we loosely follow the YASGuide. It's worth few extra minutes of our time to leave future generations with well-written, readable code.","category":"page"},{"location":"contributor_guide/#General-coding-guidelines","page":"Contributor Guide","title":"General coding guidelines","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Keep the number of members of Julia structs small if possible (less than 8 members).\nCode should reflect \"human intuition\" if possible. This means abstraction should reflect how humans reason about the problem under consideration.\nCode with small blast radius. If your code needs to be modified or extended, the resulting required changes should be as small and as localized as possible.\nWhen you write code, write it with testing and debugging in mind.\nIdeally, the lowest level structs have no defaults for their member fields. Nobody can remember all the defaults, so it is better to introduce them at the high-level API only.\nMake sure that module imports are specific so that it is easy to trace back where functions that are used inside a module are coming from.\nConsider naming abstract Julia types \"AbstractMyType\" in order to avoid confusion for the reader of your code.\nComments in your code should explain why the code exists and clarify if necessary, not just restate the line of code in words.\nBe mindful of namespace issues when writing functional code, especially when writing function code that represents mathematical or physical concepts.\nConsider using keywords in your structs to allow readers to more effectively reason about your code.","category":"page"},{"location":"contributor_guide/#What-is-a-\"collaborator\"-and-how-can-I-become-one?","page":"Contributor Guide","title":"What is a \"collaborator\" and how can I become one?","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Collaborators have permissions to review pull requests and status allows a contributor to review pull requests in addition to opening them. Collaborators can also create branches in the main ClimaAtmos repository.\nWe ask that new contributors try their hand at forking ClimaAtmos, and opening and merging a pull request before requesting collaborator status.","category":"page"},{"location":"contributor_guide/#What's-a-good-way-to-start-developing-ClimaAtmos?","page":"Contributor Guide","title":"What's a good way to start developing ClimaAtmos?","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Tackle an existing issue. We keep a list of good first issues that are self-contained and suitable for a newcomer to try and work on.\nTry to run ClimaAtmos and play around with it to simulate your favorite fluids and atmosphere physics. If you run into any problems or find it difficult to use or understand, please open an issue!\nWrite up an example or tutorial on how to do something useful with ClimaAtmos, like how to set up a new physical configuration.\nImprove documentation or comments if you found something hard to use.\nImplement a new feature if you need it to use ClimaAtmos.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"If you're interested in working on something, let us know by commenting on existing issues or  by opening a new issue. This is to make sure no one else is working on the same issue and so  we can help and guide you in case there is anything you need to know beforehand.","category":"page"},{"location":"contributor_guide/#Ground-Rules","page":"Contributor Guide","title":"Ground Rules","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Each pull request should consist of a logical collection of changes. You can include multiple bug fixes in a single pull request, but they should be related. For unrelated changes, please submit multiple pull requests.\nDo not commit changes to files that are irrelevant to your feature or bugfix (eg: .gitignore).\nBe willing to accept criticism and work on improving your code; we don't want to break other users' code, so care must be taken not to introduce bugs. We discuss pull requests and keep working on them until we believe we've done a good job.\nBe aware that the pull request review process is not immediate, and is generally proportional to the size of the pull request.","category":"page"},{"location":"contributor_guide/#Reporting-a-bug","page":"Contributor Guide","title":"Reporting a bug","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"The easiest way to get involved is to report issues you encounter when using ClimaAtmos or by requesting something you think is missing.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Head over to the issues page.\nSearch to see if your issue already exists or has even been solved previously.\nIf you indeed have a new issue or request, click the \"New Issue\" button.\nPlease be as specific as possible. Include the version of the code you were using, as well as what operating system you are running. The output of Julia's versioninfo() and ] status is helpful to include. Try your best to include a complete, \"minimal working example\" that reproduces the issue.","category":"page"},{"location":"contributor_guide/#Setting-up-your-development-environment","page":"Contributor Guide","title":"Setting up your development environment","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Install Julia on your system.\nInstall git on your system if it is not already there (install XCode command line tools on a Mac or git bash on Windows).\nLogin to your GitHub account and make a fork of the ClimaAtmos repository by clicking the \"Fork\" button.\nClone your fork of the ClimaAtmos repository (in terminal on Mac/Linux or git shell/ GUI on Windows) in the location you'd like to keep it.\ngit clone https://github.com/your-user-name/ClimaAtmos.jl.git\nNavigate to that folder in the terminal or in Anaconda Prompt if you're on Windows.\nConnect your repository to the upstream (main project).\ngit remote add ClimaAtmos https://github.com/CLiMA/ClimaAtmos.jl.git\nCreate the development environment by opening Julia via julia --project then typing in ] instantiate. This will install all the dependencies in the Project.toml file.\nYou can test to make sure ClimaAtmos works by typing in ] test. Doing so will run all the tests (and this can take a while).","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Your development environment is now ready!","category":"page"},{"location":"contributor_guide/#Pull-Requests","page":"Contributor Guide","title":"Pull Requests","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"We follow the ColPrac guide for collaborative practices. We ask that new contributors read that guide before submitting a pull request.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Changes and contributions should be made via GitHub pull requests against the main branch.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"When you're done making changes, commit the changes you made. Chris Beams has written a  guide on how to write good commit messages.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"When you think your changes are ready to be merged into the main repository, push to your fork and submit a pull request.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Working on your first Pull Request? You can learn how from this free video series How to Contribute to an Open Source Project on GitHub, Aaron Meurer's tutorial on the git workflow, or the guide “How to Contribute to Open Source\".","category":"page"},{"location":"contributor_guide/#Documentation","page":"Contributor Guide","title":"Documentation","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Generally, we follow the Julia conventions for documentation https://docs.julialang.org/en/v1/manual/documentation/.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Now that you've made your awesome contribution, it's time to tell the world how to use it. Writing documentation strings is really important to make sure others use your functionality properly. Didn't write new functions? That's fine, but be sure that the documentation for the code you touched is still in great shape. It is not uncommon to find some strange wording or clarification that you can take care of while you are here.","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"Here is an example of a docstring:","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"TODO: add example","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"You can preview how the Documentation will look like after merging by building the documentation  locally. From the main directory of your local repository call","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"julia --project -e 'using Pkg; Pkg.instantiate()'\njulia --project=docs/ -e 'using Pkg; Pkg.instantiate()'\nJULIA_DEBUG=Documenter julia --project=docs/ docs/make.jl","category":"page"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"and then open docs/build/index.html in your favorite browser. Providing the environment variable  JULIA_DEBUG=Documenter will provide with more information in the documentation build process and thus help figuring out a potential bug.","category":"page"},{"location":"contributor_guide/#Credits","page":"Contributor Guide","title":"Credits","text":"","category":"section"},{"location":"contributor_guide/","page":"Contributor Guide","title":"Contributor Guide","text":"This contributor's guide is heavily based on the excellent Oceananigans.jl contributor's guide which is heavily based on the excellent MetPy contributor's guide.","category":"page"},{"location":"diagnostic_edmf_equations/#Diagnostic-EDMF-equations","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF equations","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"This describes the diagnostic EDMF scheme equations and its discretizations. Where possible, we use a coordinate invariant form: the ClimaCore operators generally handle the conversions between bases internally.","category":"page"},{"location":"diagnostic_edmf_equations/#Grid-scale-variables","page":"Diagnostic EDMF Equations","title":"Grid-scale variables","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"rho: density in kg/m³, discretized at cell centers.\nu^3: the contravariant 3 component of velocity, discretized at cell faces.\nh_mathrmtot: total enthalpy in J/kg, discretized at cell centers.\nq_t: total specific humidity in kg/kg, discretized at cell centers.\nPhi = g z: geopotential in m²/s², where g is the gravitational acceleration rate and z is altitude above the mean sea level, discretized at cell centers.\n(nabla Phi)^3: the contravariant 3 component of the gradient of geopotential, reconstructed at cell centers.\np: air pressure, reconstructed at cell centers.","category":"page"},{"location":"diagnostic_edmf_equations/#Subgrid-scale-variables","page":"Diagnostic EDMF Equations","title":"Subgrid-scale variables","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"hatrho^j: effective density in kg/m³. Superscript j represents the sub-domain. hatrho^j = rho^j a^j where rho^j is the sub-domain density and a^j is the sub-domain area fraction. This is discretized at cell centers.\nrho^j: density in kg/m³, derived from the thermodynamic state, reconstructed at cell centers.\nu^j3: the contravariant 3 component of velocity, discretized at cell faces.\nh_mathrmtot^j: total enthalpy, discretized at cell centers.\nq_t^j: total specific humidity of the sub-domain j, discretized at cell centers.\nu^03: the contravariant 3 component of the environmental velocity, obtained as the residual:\nrho u^0 3 = rho u^3 -  sum_jne 0 hatrho^j u^j 3","category":"page"},{"location":"diagnostic_edmf_equations/#Equations-and-discretizations","page":"Diagnostic EDMF Equations","title":"Equations and discretizations","text":"","category":"section"},{"location":"diagnostic_edmf_equations/#Mass","page":"Diagnostic EDMF Equations","title":"Mass","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1J fracpartialpartial xi^3 bigl( hatrho^j J u^j 3 bigr)\n= (E^j0 - Delta^j0) hatrho^j","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"This is descritized using the following","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1Ji-1 left( Ji-frac12 hatrho^ji u^(j) 3i-frac12 -Ji-frac32 hatrho^ji-1 u^j 3i-frac32 right)\n= (E^j0i-1 - Delta^j0i-1) hatrho^ji-1","category":"page"},{"location":"diagnostic_edmf_equations/#Momentum","page":"Diagnostic EDMF Equations","title":"Momentum","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1J^2 fracpartialpartial xi^3  bigl(frac12 J^2 (u^j 3)^2 bigr)\n= - g^3l left( fracrho^j-rhorho^j fracpartialpartial xi^l  Phiright) + E^j0(u^03 - u^j3) - d^j 3","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"This is descritized using the following","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac12 frac1Ji-1^2 left( Ji-frac12^2 u^j 3i-frac12^2 -Ji-frac32 u^j 3i-frac32^2 right)\n= - fracrho^ji-1-rhoi-1rho^ji-1 nabla^3 Phi + E^j0i-1(u^0 3i-frac32 - u^j 3i-frac32) - d^j 3i-1","category":"page"},{"location":"diagnostic_edmf_equations/#Total-energy","page":"Diagnostic EDMF Equations","title":"Total energy","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1J fracpartialpartial xi^3 ( hatrho^j J h_mathrmtot^j u^j 3 )\n= hatrho^j left(E^j0 h_mathrmtot - Delta^j0 h_mathrmtot^jright)","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"This is descritized using the following","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1Ji-1 left( Ji-frac12 hatrho^ji u^j 3i-frac12 h_mathrmtot^ji -Ji-frac32 hatrho^ji-1 u^j 3i-frac32 h_mathrmtot^ji-1 right)\n= hatrho^ji-1 (E^(j0)i-1 h_mathrmtoti-1  - Delta^(j0)i-1 h_mathrmtot^ji-1)","category":"page"},{"location":"diagnostic_edmf_equations/#Total-water","page":"Diagnostic EDMF Equations","title":"Total water","text":"","category":"section"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1J fracpartialpartial xi^3 bigl(hatrho^j J q_t^j (u^j 3 - W_t^j hat k^3) bigr)\n= hatrho^j left(E^j0 q_t - Delta^j0 q_t^jright)","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"This is descritized using the following","category":"page"},{"location":"diagnostic_edmf_equations/","page":"Diagnostic EDMF Equations","title":"Diagnostic EDMF Equations","text":"frac1Ji-1 left( Ji-frac12 hatrho^ji u^j 3i-frac12 q_t^ji -Ji-frac32 hatrho^ji-1 u^j 3i-frac32 q_t^ji-1 right)\n= hatrho^ji-1 (E^j0i-1 q_ti-1  - Delta^j0i-1 q_t^ji-1)","category":"page"},{"location":"#ClimaAtmos.jl","page":"Home","title":"ClimaAtmos.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClimaAtmos.jl is a library for building atmospheric circulation models that is designed from the outset to leverage data assimilation and machine learning tools.","category":"page"}]
}
